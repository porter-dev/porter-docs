openapi: 3.0.0
servers:
  - url: "https://dashboard.getporter.dev"
security:
  - Bearer: []
paths:
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces:
    get:
      description: Lists namespaces
      operationId: listNamespaces
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The cluster id
          in: path
          name: cluster_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ClusterID
          x-go-name: ClusterID
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNamespacesResponse'
          description: Successfully listed namespaces
        "403":
          content: {}
          description: Forbidden
      summary: List all namespaces
      tags:
        - Namespaces
      x-codeSamples:
        - lang: Shell
          source: "curl --request GET \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces\"\n\nheaders = {\"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      description: Creates a new namespace
      operationId: createNamespace
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The cluster id
          in: path
          name: cluster_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ClusterID
          x-go-name: ClusterID
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/createNamespace_request'
        description: The namespace to create
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNamespaceResponse'
          description: Successfully created a new namespace
        "403":
          content: {}
          description: Forbidden
      summary: Create a new namespace
      tags:
        - Namespaces
      x-codeSamples:
        - lang: Shell
          source: "curl --request POST \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\"}'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN',\n    'content-type': 'application/json'\n  },\n  body: '{\"name\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"name\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces\"\n\npayload = {\"name\": \"string\"}\nheaders = {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: CreateNamespaceRequest
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}:
    delete:
      description: Deletes a namespace
      operationId: deleteNamespace
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The cluster id
          in: path
          name: cluster_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ClusterID
          x-go-name: ClusterID
        - description: The namespace name
          in: path
          name: namespace
          required: true
          schema:
            type: string
            x-go-name: Namespace
          x-go-name: Namespace
      responses:
        "200":
          content: {}
          description: Successfully deleted namespace
        "403":
          content: {}
          description: Forbidden
      summary: Delete a namespace
      tags:
        - Namespaces
      x-codeSamples:
        - lang: Shell
          source: "curl --request DELETE \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace} \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}';\n\nlet options = {method: 'DELETE', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}\"\n\nheaders = {\"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    get:
      description: Gets a namespace
      operationId: getNamespace
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The cluster id
          in: path
          name: cluster_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ClusterID
          x-go-name: ClusterID
        - description: The namespace name
          in: path
          name: namespace
          required: true
          schema:
            type: string
            x-go-name: Namespace
          x-go-name: Namespace
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNamespaceResponse'
          description: Successfully got the namespace
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      summary: Get a namespace
      tags:
        - Namespaces
      x-codeSamples:
        - lang: Shell
          source: "curl --request GET \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace} \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}\"\n\nheaders = {\"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases:
    get:
      description: List releases
      operationId: listReleases
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The cluster id
          in: path
          name: cluster_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ClusterID
          x-go-name: ClusterID
        - description: The namespace name
          in: path
          name: namespace
          required: true
          schema:
            type: string
            x-go-name: Namespace
          x-go-name: Namespace
        - description: the pagination limit
          in: query
          name: limit
          schema:
            format: int64
            type: integer
            x-go-name: Limit
          x-go-name: Limit
        - description: how many items to skip
          in: query
          name: skip
          schema:
            format: int64
            type: integer
            x-go-name: Skip
          x-go-name: Skip
        - description: whether to sort by date
          in: query
          name: byDate
          schema:
            type: boolean
            x-go-name: ByDate
          x-go-name: ByDate
        - description: which helm statuses to filter by
          explode: false
          in: query
          name: statusFilter
          schema:
            items:
              type: string
            type: array
            x-go-name: StatusFilter
          style: form
          x-go-name: StatusFilter
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReleasesResponse'
          description: Successfully listed releases
        "403":
          content: {}
          description: Forbidden
      summary: List releases
      tags:
        - Releases
      x-codeSamples:
        - lang: Shell
          source: "curl --request GET \\\n  --url 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases?limit=50&skip=10&byDate=false&statusFilter=SOME_ARRAY_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases?limit=50&skip=10&byDate=false&statusFilter=SOME_ARRAY_VALUE';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases?limit=50&skip=10&byDate=false&statusFilter=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases\"\n\nquerystring = {\"limit\":\"50\",\"skip\":\"10\",\"byDate\":\"false\",\"statusFilter\":\"SOME_ARRAY_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases?limit=50&skip=10&byDate=false&statusFilter=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      description: Creates a new release
      operationId: createRelease
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The cluster id
          in: path
          name: cluster_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ClusterID
          x-go-name: ClusterID
        - description: The namespace name
          in: path
          name: namespace
          required: true
          schema:
            type: string
            x-go-name: Namespace
          x-go-name: Namespace
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/createRelease_request'
        description: The release to create
        required: false
      responses:
        "201":
          content: {}
          description: Successfully created the release
        "403":
          content: {}
          description: Forbidden
      summary: Create a new release
      tags:
        - Releases
      x-codeSamples:
        - lang: Shell
          source: "curl --request POST \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"build_config\":{\"builder\":\"string\",\"buildpacks\":[\"string\"],\"config\":{\"property1\":{},\"property2\":{}}},\"github_action_config\":{\"dockerfile_path\":\"string\",\"folder_path\":\"string\",\"git_branch\":\"string\",\"git_repo\":\"string\",\"git_repo_id\":0,\"image_repo_uri\":\"string\",\"registry_id\":0,\"should_create_workflow\":true},\"image_url\":\"string\",\"name\":\"string\",\"synced_env_groups\":[\"string\"],\"tags\":[\"string\"],\"template_name\":\"string\",\"template_version\":\"string\",\"values\":{\"property1\":{},\"property2\":{}}}'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN',\n    'content-type': 'application/json'\n  },\n  body: '{\"build_config\":{\"builder\":\"string\",\"buildpacks\":[\"string\"],\"config\":{\"property1\":{},\"property2\":{}}},\"github_action_config\":{\"dockerfile_path\":\"string\",\"folder_path\":\"string\",\"git_branch\":\"string\",\"git_repo\":\"string\",\"git_repo_id\":0,\"image_repo_uri\":\"string\",\"registry_id\":0,\"should_create_workflow\":true},\"image_url\":\"string\",\"name\":\"string\",\"synced_env_groups\":[\"string\"],\"tags\":[\"string\"],\"template_name\":\"string\",\"template_version\":\"string\",\"values\":{\"property1\":{},\"property2\":{}}}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"build_config\\\":{\\\"builder\\\":\\\"string\\\",\\\"buildpacks\\\":[\\\"string\\\"],\\\"config\\\":{\\\"property1\\\":{},\\\"property2\\\":{}}},\\\"github_action_config\\\":{\\\"dockerfile_path\\\":\\\"string\\\",\\\"folder_path\\\":\\\"string\\\",\\\"git_branch\\\":\\\"string\\\",\\\"git_repo\\\":\\\"string\\\",\\\"git_repo_id\\\":0,\\\"image_repo_uri\\\":\\\"string\\\",\\\"registry_id\\\":0,\\\"should_create_workflow\\\":true},\\\"image_url\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"synced_env_groups\\\":[\\\"string\\\"],\\\"tags\\\":[\\\"string\\\"],\\\"template_name\\\":\\\"string\\\",\\\"template_version\\\":\\\"string\\\",\\\"values\\\":{\\\"property1\\\":{},\\\"property2\\\":{}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases\"\n\npayload = {\n    \"build_config\": {\n        \"builder\": \"string\",\n        \"buildpacks\": [\"string\"],\n        \"config\": {\n            \"property1\": {},\n            \"property2\": {}\n        }\n    },\n    \"github_action_config\": {\n        \"dockerfile_path\": \"string\",\n        \"folder_path\": \"string\",\n        \"git_branch\": \"string\",\n        \"git_repo\": \"string\",\n        \"git_repo_id\": 0,\n        \"image_repo_uri\": \"string\",\n        \"registry_id\": 0,\n        \"should_create_workflow\": True\n    },\n    \"image_url\": \"string\",\n    \"name\": \"string\",\n    \"synced_env_groups\": [\"string\"],\n    \"tags\": [\"string\"],\n    \"template_name\": \"string\",\n    \"template_version\": \"string\",\n    \"values\": {\n        \"property1\": {},\n        \"property2\": {}\n    }\n}\nheaders = {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases\"\n\n\tpayload := strings.NewReader(\"{\\\"build_config\\\":{\\\"builder\\\":\\\"string\\\",\\\"buildpacks\\\":[\\\"string\\\"],\\\"config\\\":{\\\"property1\\\":{},\\\"property2\\\":{}}},\\\"github_action_config\\\":{\\\"dockerfile_path\\\":\\\"string\\\",\\\"folder_path\\\":\\\"string\\\",\\\"git_branch\\\":\\\"string\\\",\\\"git_repo\\\":\\\"string\\\",\\\"git_repo_id\\\":0,\\\"image_repo_uri\\\":\\\"string\\\",\\\"registry_id\\\":0,\\\"should_create_workflow\\\":true},\\\"image_url\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"synced_env_groups\\\":[\\\"string\\\"],\\\"tags\\\":[\\\"string\\\"],\\\"template_name\\\":\\\"string\\\",\\\"template_version\\\":\\\"string\\\",\\\"values\\\":{\\\"property1\\\":{},\\\"property2\\\":{}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: CreateReleaseRequest
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{name}/{version}:
    delete:
      description: Deletes a release
      operationId: deleteRelease
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The registry id
          in: path
          name: cluster_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: RegistryID
          x-go-name: RegistryID
        - description: The namespace name
          in: path
          name: namespace
          required: true
          schema:
            type: string
            x-go-name: Namespace
          x-go-name: Namespace
        - description: The release name
          in: path
          name: name
          required: true
          schema:
            type: string
            x-go-name: Name
          x-go-name: Name
        - description: The release version (`0` for latest version)
          in: path
          name: version
          required: true
          schema:
            format: uint64
            minimum: 0
            type: integer
            x-go-name: Version
          x-go-name: Version
      responses:
        "200":
          content: {}
          description: Successfully deleted the release
        "403":
          content: {}
          description: Forbidden
      summary: Delete a release
      tags:
        - Releases
      x-codeSamples:
        - lang: Shell
          source: "curl --request DELETE \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{name}/{version} \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{name}/{version}';\n\nlet options = {method: 'DELETE', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{name}/{version}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{name}/{version}\"\n\nheaders = {\"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{name}/{version}\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    get:
      description: Gets a release
      operationId: getRelease
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The registry id
          in: path
          name: cluster_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: RegistryID
          x-go-name: RegistryID
        - description: The namespace name
          in: path
          name: namespace
          required: true
          schema:
            type: string
            x-go-name: Namespace
          x-go-name: Namespace
        - description: The release name
          in: path
          name: name
          required: true
          schema:
            type: string
            x-go-name: Name
          x-go-name: Name
        - description: The release version (`0` for latest version)
          in: path
          name: version
          required: true
          schema:
            format: uint64
            minimum: 0
            type: integer
            x-go-name: Version
          x-go-name: Version
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReleaseResponse'
          description: Successfully got the release
        "403":
          content: {}
          description: Forbidden
      summary: Get a release
      tags:
        - Releases
      x-codeSamples:
        - lang: Shell
          source: "curl --request GET \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{name}/{version} \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{name}/{version}';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{name}/{version}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{name}/{version}\"\n\nheaders = {\"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{name}/{version}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    patch:
      description: Updates a release
      operationId: updateRelease
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The registry id
          in: path
          name: cluster_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: RegistryID
          x-go-name: RegistryID
        - description: The namespace name
          in: path
          name: namespace
          required: true
          schema:
            type: string
            x-go-name: Namespace
          x-go-name: Namespace
        - description: The release name
          in: path
          name: name
          required: true
          schema:
            type: string
            x-go-name: Name
          x-go-name: Name
        - description: The release version (`0` for latest version)
          in: path
          name: version
          required: true
          schema:
            format: uint64
            minimum: 0
            type: integer
            x-go-name: Version
          x-go-name: Version
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/updateRelease_request'
        description: The release to update
        required: false
      responses:
        "200":
          content: {}
          description: Successfully updated the release
        "403":
          content: {}
          description: Forbidden
      summary: Update a release
      tags:
        - Releases
      x-codeSamples:
        - lang: Shell
          source: "curl --request PATCH \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{name}/{version} \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"values\":\"string\",\"version\":\"string\"}'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{name}/{version}';\n\nlet options = {\n  method: 'PATCH',\n  headers: {\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN',\n    'content-type': 'application/json'\n  },\n  body: '{\"values\":\"string\",\"version\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{name}/{version}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"values\\\":\\\"string\\\",\\\"version\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{name}/{version}\"\n\npayload = {\n    \"values\": \"string\",\n    \"version\": \"string\"\n}\nheaders = {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"PATCH\", url, json=payload, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{name}/{version}\"\n\n\tpayload := strings.NewReader(\"{\\\"values\\\":\\\"string\\\",\\\"version\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: UpdateReleaseRequest
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks:
    get:
      description: Lists stacks in a namespace
      operationId: listStacks
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The cluster id
          in: path
          name: cluster_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ClusterID
          x-go-name: ClusterID
        - description: The namespace name
          in: path
          name: namespace
          required: true
          schema:
            type: string
            x-go-name: Namespace
          x-go-name: Namespace
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackListResponse'
          description: Successfully listed stacks
        "403":
          content: {}
          description: Forbidden
      summary: List stacks
      tags:
        - Stacks
      x-codeSamples:
        - lang: Shell
          source: "curl --request GET \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks\"\n\nheaders = {\"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      description: Creates a stack
      operationId: createStack
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The cluster id
          in: path
          name: cluster_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ClusterID
          x-go-name: ClusterID
        - description: The namespace name
          in: path
          name: namespace
          required: true
          schema:
            type: string
            x-go-name: Namespace
          x-go-name: Namespace
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/createStack_request'
        description: The stack to create
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stack'
          description: Successfully created the stack
        "403":
          content: {}
          description: Forbidden
      summary: Create a stack
      tags:
        - Stacks
      x-codeSamples:
        - lang: Shell
          source: "curl --request POST \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"app_resources\":[{\"name\":\"string\",\"source_config_name\":\"string\",\"template_name\":\"string\",\"template_repo_url\":\"string\",\"template_version\":\"string\",\"values\":{\"property1\":{},\"property2\":{}}}],\"name\":\"string\",\"source_configs\":[{\"build\":{\"buildpack\":{\"builder\":\"string\",\"buildpacks\":[\"string\"]},\"dockerfile\":{\"dockerfile_path\":\"string\"},\"folder_path\":\"string\",\"git\":{\"git_branch\":\"string\",\"git_integration_id\":0,\"git_integration_kind\":\"string\",\"git_repo\":\"string\"},\"method\":\"string\"},\"image_repo_uri\":\"string\",\"image_tag\":\"string\",\"name\":\"string\"}]}'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN',\n    'content-type': 'application/json'\n  },\n  body: '{\"app_resources\":[{\"name\":\"string\",\"source_config_name\":\"string\",\"template_name\":\"string\",\"template_repo_url\":\"string\",\"template_version\":\"string\",\"values\":{\"property1\":{},\"property2\":{}}}],\"name\":\"string\",\"source_configs\":[{\"build\":{\"buildpack\":{\"builder\":\"string\",\"buildpacks\":[\"string\"]},\"dockerfile\":{\"dockerfile_path\":\"string\"},\"folder_path\":\"string\",\"git\":{\"git_branch\":\"string\",\"git_integration_id\":0,\"git_integration_kind\":\"string\",\"git_repo\":\"string\"},\"method\":\"string\"},\"image_repo_uri\":\"string\",\"image_tag\":\"string\",\"name\":\"string\"}]}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"app_resources\\\":[{\\\"name\\\":\\\"string\\\",\\\"source_config_name\\\":\\\"string\\\",\\\"template_name\\\":\\\"string\\\",\\\"template_repo_url\\\":\\\"string\\\",\\\"template_version\\\":\\\"string\\\",\\\"values\\\":{\\\"property1\\\":{},\\\"property2\\\":{}}}],\\\"name\\\":\\\"string\\\",\\\"source_configs\\\":[{\\\"build\\\":{\\\"buildpack\\\":{\\\"builder\\\":\\\"string\\\",\\\"buildpacks\\\":[\\\"string\\\"]},\\\"dockerfile\\\":{\\\"dockerfile_path\\\":\\\"string\\\"},\\\"folder_path\\\":\\\"string\\\",\\\"git\\\":{\\\"git_branch\\\":\\\"string\\\",\\\"git_integration_id\\\":0,\\\"git_integration_kind\\\":\\\"string\\\",\\\"git_repo\\\":\\\"string\\\"},\\\"method\\\":\\\"string\\\"},\\\"image_repo_uri\\\":\\\"string\\\",\\\"image_tag\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\"\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks\"\n\npayload = {\n    \"app_resources\": [\n        {\n            \"name\": \"string\",\n            \"source_config_name\": \"string\",\n            \"template_name\": \"string\",\n            \"template_repo_url\": \"string\",\n            \"template_version\": \"string\",\n            \"values\": {\n                \"property1\": {},\n                \"property2\": {}\n            }\n        }\n    ],\n    \"name\": \"string\",\n    \"source_configs\": [\n        {\n            \"build\": {\n                \"buildpack\": {\n                    \"builder\": \"string\",\n                    \"buildpacks\": [\"string\"]\n                },\n                \"dockerfile\": {\"dockerfile_path\": \"string\"},\n                \"folder_path\": \"string\",\n                \"git\": {\n                    \"git_branch\": \"string\",\n                    \"git_integration_id\": 0,\n                    \"git_integration_kind\": \"string\",\n                    \"git_repo\": \"string\"\n                },\n                \"method\": \"string\"\n            },\n            \"image_repo_uri\": \"string\",\n            \"image_tag\": \"string\",\n            \"name\": \"string\"\n        }\n    ]\n}\nheaders = {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks\"\n\n\tpayload := strings.NewReader(\"{\\\"app_resources\\\":[{\\\"name\\\":\\\"string\\\",\\\"source_config_name\\\":\\\"string\\\",\\\"template_name\\\":\\\"string\\\",\\\"template_repo_url\\\":\\\"string\\\",\\\"template_version\\\":\\\"string\\\",\\\"values\\\":{\\\"property1\\\":{},\\\"property2\\\":{}}}],\\\"name\\\":\\\"string\\\",\\\"source_configs\\\":[{\\\"build\\\":{\\\"buildpack\\\":{\\\"builder\\\":\\\"string\\\",\\\"buildpacks\\\":[\\\"string\\\"]},\\\"dockerfile\\\":{\\\"dockerfile_path\\\":\\\"string\\\"},\\\"folder_path\\\":\\\"string\\\",\\\"git\\\":{\\\"git_branch\\\":\\\"string\\\",\\\"git_integration_id\\\":0,\\\"git_integration_kind\\\":\\\"string\\\",\\\"git_repo\\\":\\\"string\\\"},\\\"method\\\":\\\"string\\\"},\\\"image_repo_uri\\\":\\\"string\\\",\\\"image_tag\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: CreateStackRequest
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}:
    delete:
      description: Deletes a stack
      operationId: deleteStack
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The cluster id
          in: path
          name: cluster_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ClusterID
          x-go-name: ClusterID
        - description: The namespace
          in: path
          name: namespace
          required: true
          schema:
            type: string
            x-go-name: Namespace
          x-go-name: Namespace
        - description: The stack id
          in: path
          name: stack_id
          required: true
          schema:
            type: string
            x-go-name: StackID
          x-go-name: StackID
      responses:
        "200":
          content: {}
          description: Successfully deleted the stack
        "403":
          content: {}
          description: Forbidden
      summary: Delete a stack
      tags:
        - Stacks
      x-codeSamples:
        - lang: Shell
          source: "curl --request DELETE \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id} \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}';\n\nlet options = {method: 'DELETE', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}\"\n\nheaders = {\"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    get:
      description: Gets a stack
      operationId: getStack
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The cluster id
          in: path
          name: cluster_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ClusterID
          x-go-name: ClusterID
        - description: The namespace
          in: path
          name: namespace
          required: true
          schema:
            type: string
            x-go-name: Namespace
          x-go-name: Namespace
        - description: The stack id
          in: path
          name: stack_id
          required: true
          schema:
            type: string
            x-go-name: StackID
          x-go-name: StackID
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stack'
          description: Successfully got the stack
        "403":
          content: {}
          description: Forbidden
      summary: Get a stack
      tags:
        - Stacks
      x-codeSamples:
        - lang: Shell
          source: "curl --request GET \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id} \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}\"\n\nheaders = {\"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/{stack_revision_number}:
    get:
      description: Gets a stack revision
      operationId: getStackRevision
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The cluster id
          in: path
          name: cluster_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ClusterID
          x-go-name: ClusterID
        - description: The namespace
          in: path
          name: namespace
          required: true
          schema:
            type: string
            x-go-name: Namespace
          x-go-name: Namespace
        - description: The stack id
          in: path
          name: stack_id
          required: true
          schema:
            type: string
            x-go-name: StackID
          x-go-name: StackID
        - description: The stack revision number
          in: path
          name: stack_revision_number
          required: true
          schema:
            minimum: 1
            type: string
            x-go-name: StackRevisionNumber
          x-go-name: StackRevisionNumber
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackRevision'
          description: Successfully got the stack revision
        "403":
          content: {}
          description: Forbidden
      summary: Get a stack revision
      tags:
        - Stacks
      x-codeSamples:
        - lang: Shell
          source: "curl --request GET \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/{stack_revision_number} \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/{stack_revision_number}';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/{stack_revision_number}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/{stack_revision_number}\"\n\nheaders = {\"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/{stack_revision_number}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/rollback:
    post:
      description: Performs a rollback for a stack
      operationId: rollbackStack
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The cluster id
          in: path
          name: cluster_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ClusterID
          x-go-name: ClusterID
        - description: The namespace
          in: path
          name: namespace
          required: true
          schema:
            type: string
            x-go-name: Namespace
          x-go-name: Namespace
        - description: The stack id
          in: path
          name: stack_id
          required: true
          schema:
            type: string
            x-go-name: StackID
          x-go-name: StackID
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/rollbackStack_request'
        description: The target revision to roll back to
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stack'
          description: Successfully rolled the stack back
        "403":
          content: {}
          description: Forbidden
      summary: Rollback stack
      tags:
        - Stacks
      x-codeSamples:
        - lang: Shell
          source: "curl --request POST \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/rollback \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"target_revision\":0}'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/rollback';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN',\n    'content-type': 'application/json'\n  },\n  body: '{\"target_revision\":0}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/rollback\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"target_revision\\\":0}\"\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/rollback\"\n\npayload = {\"target_revision\": 0}\nheaders = {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/rollback\"\n\n\tpayload := strings.NewReader(\"{\\\"target_revision\\\":0}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: StackRollbackRequest
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/source:
    put:
      description: Updates a stack's source configuration
      operationId: putStackSource
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The cluster id
          in: path
          name: cluster_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ClusterID
          x-go-name: ClusterID
        - description: The namespace
          in: path
          name: namespace
          required: true
          schema:
            type: string
            x-go-name: Namespace
          x-go-name: Namespace
        - description: The stack id
          in: path
          name: stack_id
          required: true
          schema:
            type: string
            x-go-name: StackID
          x-go-name: StackID
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/putStackSource_request'
        description: The source configurations to update
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stack'
          description: Successfully updated the source configuration
        "403":
          content: {}
          description: Forbidden
      summary: Update source configuration
      tags:
        - Stacks
      x-codeSamples:
        - lang: Shell
          source: "curl --request PUT \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/source \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"source_configs\":[{\"build\":{\"buildpack\":{\"builder\":\"string\",\"buildpacks\":[\"string\"]},\"dockerfile\":{\"dockerfile_path\":\"string\"},\"folder_path\":\"string\",\"git\":{\"git_branch\":\"string\",\"git_integration_id\":0,\"git_integration_kind\":\"string\",\"git_repo\":\"string\"},\"method\":\"string\"},\"image_repo_uri\":\"string\",\"image_tag\":\"string\",\"name\":\"string\"}]}'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/source';\n\nlet options = {\n  method: 'PUT',\n  headers: {\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN',\n    'content-type': 'application/json'\n  },\n  body: '{\"source_configs\":[{\"build\":{\"buildpack\":{\"builder\":\"string\",\"buildpacks\":[\"string\"]},\"dockerfile\":{\"dockerfile_path\":\"string\"},\"folder_path\":\"string\",\"git\":{\"git_branch\":\"string\",\"git_integration_id\":0,\"git_integration_kind\":\"string\",\"git_repo\":\"string\"},\"method\":\"string\"},\"image_repo_uri\":\"string\",\"image_tag\":\"string\",\"name\":\"string\"}]}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/source\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"source_configs\\\":[{\\\"build\\\":{\\\"buildpack\\\":{\\\"builder\\\":\\\"string\\\",\\\"buildpacks\\\":[\\\"string\\\"]},\\\"dockerfile\\\":{\\\"dockerfile_path\\\":\\\"string\\\"},\\\"folder_path\\\":\\\"string\\\",\\\"git\\\":{\\\"git_branch\\\":\\\"string\\\",\\\"git_integration_id\\\":0,\\\"git_integration_kind\\\":\\\"string\\\",\\\"git_repo\\\":\\\"string\\\"},\\\"method\\\":\\\"string\\\"},\\\"image_repo_uri\\\":\\\"string\\\",\\\"image_tag\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\"\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/source\"\n\npayload = {\"source_configs\": [\n        {\n            \"build\": {\n                \"buildpack\": {\n                    \"builder\": \"string\",\n                    \"buildpacks\": [\"string\"]\n                },\n                \"dockerfile\": {\"dockerfile_path\": \"string\"},\n                \"folder_path\": \"string\",\n                \"git\": {\n                    \"git_branch\": \"string\",\n                    \"git_integration_id\": 0,\n                    \"git_integration_kind\": \"string\",\n                    \"git_repo\": \"string\"\n                },\n                \"method\": \"string\"\n            },\n            \"image_repo_uri\": \"string\",\n            \"image_tag\": \"string\",\n            \"name\": \"string\"\n        }\n    ]}\nheaders = {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/stacks/{stack_id}/source\"\n\n\tpayload := strings.NewReader(\"{\\\"source_configs\\\":[{\\\"build\\\":{\\\"buildpack\\\":{\\\"builder\\\":\\\"string\\\",\\\"buildpacks\\\":[\\\"string\\\"]},\\\"dockerfile\\\":{\\\"dockerfile_path\\\":\\\"string\\\"},\\\"folder_path\\\":\\\"string\\\",\\\"git\\\":{\\\"git_branch\\\":\\\"string\\\",\\\"git_integration_id\\\":0,\\\"git_integration_kind\\\":\\\"string\\\",\\\"git_repo\\\":\\\"string\\\"},\\\"method\\\":\\\"string\\\"},\\\"image_repo_uri\\\":\\\"string\\\",\\\"image_tag\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: PutStackSourceConfigRequest
  /api/v1/projects/{project_id}/registries:
    get:
      description: Lists registries
      operationId: listRegistries
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRegistriesResponse'
          description: Successfully listed registries
        "403":
          content: {}
          description: Forbidden
      summary: List image registries
      tags:
        - Registries
      x-codeSamples:
        - lang: Shell
          source: "curl --request GET \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries\"\n\nheaders = {\"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      description: Connects a new image registry
      operationId: createRegistry
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/createRegistry_request'
        description: The registry to connect
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRegistryResponse'
          description: Successfully connected the registry
        "403":
          content: {}
          description: Forbidden
      summary: Connect an image registry
      tags:
        - Registries
      x-codeSamples:
        - lang: Shell
          source: "curl --request POST \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"acr_name\":\"string\",\"acr_resource_group_name\":\"string\",\"aws_integration_id\":0,\"azure_integration_id\":0,\"basic_integration_id\":0,\"do_integration_id\":0,\"gcp_integration_id\":0,\"name\":\"string\",\"url\":\"string\"}'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN',\n    'content-type': 'application/json'\n  },\n  body: '{\"acr_name\":\"string\",\"acr_resource_group_name\":\"string\",\"aws_integration_id\":0,\"azure_integration_id\":0,\"basic_integration_id\":0,\"do_integration_id\":0,\"gcp_integration_id\":0,\"name\":\"string\",\"url\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"acr_name\\\":\\\"string\\\",\\\"acr_resource_group_name\\\":\\\"string\\\",\\\"aws_integration_id\\\":0,\\\"azure_integration_id\\\":0,\\\"basic_integration_id\\\":0,\\\"do_integration_id\\\":0,\\\"gcp_integration_id\\\":0,\\\"name\\\":\\\"string\\\",\\\"url\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries\"\n\npayload = {\n    \"acr_name\": \"string\",\n    \"acr_resource_group_name\": \"string\",\n    \"aws_integration_id\": 0,\n    \"azure_integration_id\": 0,\n    \"basic_integration_id\": 0,\n    \"do_integration_id\": 0,\n    \"gcp_integration_id\": 0,\n    \"name\": \"string\",\n    \"url\": \"string\"\n}\nheaders = {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries\"\n\n\tpayload := strings.NewReader(\"{\\\"acr_name\\\":\\\"string\\\",\\\"acr_resource_group_name\\\":\\\"string\\\",\\\"aws_integration_id\\\":0,\\\"azure_integration_id\\\":0,\\\"basic_integration_id\\\":0,\\\"do_integration_id\\\":0,\\\"gcp_integration_id\\\":0,\\\"name\\\":\\\"string\\\",\\\"url\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: CreateRegistryRequest
  /api/v1/projects/{project_id}/registries/{registry_id}:
    delete:
      operationId: deleteRegistry
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The registry id
          in: path
          name: registry_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: RegistryID
          x-go-name: RegistryID
      responses:
        "200":
          content: {}
          description: Successfully disconnected image registry
        "403":
          content: {}
          description: Forbidden
      summary: Disconnect image registry
      tags:
        - Registries
      x-codeSamples:
        - lang: Shell
          source: "curl --request DELETE \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id} \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}';\n\nlet options = {method: 'DELETE', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}\"\n\nheaders = {\"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    get:
      description: Gets an image registry
      operationId: getRegistry
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The registry id
          in: path
          name: registry_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: RegistryID
          x-go-name: RegistryID
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRegistryResponse'
          description: Successfully got the registry
        "403":
          content: {}
          description: Forbidden
      summary: Get an image registry
      tags:
        - Registries
      x-codeSamples:
        - lang: Shell
          source: "curl --request GET \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id} \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}\"\n\nheaders = {\"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/projects/{project_id}/registries/{registry_id}/repositories:
    get:
      description: Lists image repositories inside the image registry given by `registry_id`
      operationId: listRegistryRepositories
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The registry id
          in: path
          name: registry_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: RegistryID
          x-go-name: RegistryID
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRegistryRepositoriesResponse'
          description: Successfully listed image repositories
        "403":
          content: {}
          description: Forbidden
      summary: List image repositories
      tags:
        - Registries
      x-codeSamples:
        - lang: Shell
          source: "curl --request GET \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}/repositories \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}/repositories';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}/repositories\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}/repositories\"\n\nheaders = {\"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}/repositories\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      description: |-
        Creates an image repository inside the registry specified by `registry_id`. This method **only** creates repositories for ECR-integrated
        repositories.
      operationId: createRegistryRepository
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The registry id
          in: path
          name: registry_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: RegistryID
          x-go-name: RegistryID
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/createRegistryRepository_request'
        description: The repository to create
        required: false
      responses:
        "201":
          content: {}
          description: Successfully created the image repository
        "403":
          content: {}
          description: Forbidden
      summary: Create image repository
      tags:
        - Registries
      x-codeSamples:
        - lang: Shell
          source: "curl --request POST \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}/repositories \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"image_repo_uri\":\"string\"}'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}/repositories';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN',\n    'content-type': 'application/json'\n  },\n  body: '{\"image_repo_uri\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}/repositories\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"image_repo_uri\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}/repositories\"\n\npayload = {\"image_repo_uri\": \"string\"}\nheaders = {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}/repositories\"\n\n\tpayload := strings.NewReader(\"{\\\"image_repo_uri\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: CreateRepositoryRequest
  /api/v1/projects/{project_id}/registries/{registry_id}/repositories/{repository}:
    get:
      operationId: listRegistryImages
      parameters:
        - description: The project id
          in: path
          name: project_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: ProjectID
          x-go-name: ProjectID
        - description: The registry id
          in: path
          name: registry_id
          required: true
          schema:
            format: uint64
            minimum: 1
            type: integer
            x-go-name: RegistryID
          x-go-name: RegistryID
        - description: the image repository name
          in: path
          name: repository
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListImagesResponse'
          description: Successfully listed images
        "403":
          content: {}
          description: Forbidden
      summary: List images
      tags:
        - Registries
      x-codeSamples:
        - lang: Shell
          source: "curl --request GET \\\n  --url https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}/repositories/{repository} \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
        - lang: Node
          source: "const fetch = require('node-fetch');\n\nlet url = 'https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}/repositories/{repository}';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
        - lang: Ruby
          source: "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}/repositories/{repository}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
        - lang: Python
          source: "import requests\n\nurl = \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}/repositories/{repository}\"\n\nheaders = {\"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://dashboard.getporter.dev/api/v1/projects/{project_id}/registries/{registry_id}/repositories/{repository}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
components:
  schemas:
    BuildConfig:
      description: BuildConfig
      properties:
        builder:
          type: string
          x-go-name: Builder
        buildpacks:
          items:
            type: string
          type: array
          x-go-name: Buildpacks
        config:
          items:
            format: uint8
            type: integer
          type: array
          x-go-name: Config
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    Chart:
      description: "Chart is a helm package that contains metadata, a default config, zero or more\noptionally parameterizable templates, and zero or more charts (dependencies)."
      example:
        schema:
          - 6
          - 6
        metadata:
          maintainers:
            - name: name
              email: email
              url: url
            - name: name
              email: email
              url: url
          appVersion: appVersion
          keywords:
            - keywords
            - keywords
          sources:
            - sources
            - sources
          deprecated: true
          icon: icon
          annotations:
            key: annotations
          description: description
          type: type
          version: version
          dependencies:
            - condition: condition
              name: name
              alias: alias
              repository: repository
              import-values:
                - "{}"
                - "{}"
              version: version
              enabled: true
              tags:
                - tags
                - tags
            - condition: condition
              name: name
              alias: alias
              repository: repository
              import-values:
                - "{}"
                - "{}"
              version: version
              enabled: true
              tags:
                - tags
                - tags
          home: home
          tags: tags
          condition: condition
          apiVersion: apiVersion
          kubeVersion: kubeVersion
          name: name
        templates:
          - data:
              - 0
              - 0
            name: name
          - data:
              - 0
              - 0
            name: name
        values:
          key: "{}"
        files:
          - data:
              - 0
              - 0
            name: name
          - data:
              - 0
              - 0
            name: name
        lock:
          generated: 2000-01-23T04:56:07.000+00:00
          digest: digest
          dependencies:
            - condition: condition
              name: name
              alias: alias
              repository: repository
              import-values:
                - "{}"
                - "{}"
              version: version
              enabled: true
              tags:
                - tags
                - tags
            - condition: condition
              name: name
              alias: alias
              repository: repository
              import-values:
                - "{}"
                - "{}"
              version: version
              enabled: true
              tags:
                - tags
                - tags
      properties:
        files:
          description: "Files are miscellaneous files in a chart archive,\ne.g. README, LICENSE, etc."
          items:
            $ref: '#/components/schemas/File'
          type: array
          x-go-name: Files
        lock:
          $ref: '#/components/schemas/Lock'
        metadata:
          $ref: '#/components/schemas/Metadata'
        schema:
          description: Schema is an optional JSON schema for imposing structure on Values
          items:
            format: uint8
            type: integer
          type: array
          x-go-name: Schema
        templates:
          description: Templates for this chart.
          items:
            $ref: '#/components/schemas/File'
          type: array
          x-go-name: Templates
        values:
          additionalProperties:
            properties: {}
            type: object
          description: Values are default config for this chart.
          type: object
          x-go-name: Values
      type: object
      x-go-package: helm.sh/helm/v3/pkg/chart
    ConditionStatus:
      type: string
      x-go-package: k8s.io/api/core/v1
    CreateBuildConfigRequest:
      example:
        buildpacks:
          - buildpacks
          - buildpacks
        builder: builder
        config:
          key: "{}"
      properties:
        builder:
          type: string
          x-go-name: Builder
        buildpacks:
          items:
            type: string
          type: array
          x-go-name: Buildpacks
        config:
          additionalProperties:
            properties: {}
            type: object
          type: object
          x-go-name: Config
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    CreateGitActionConfigRequest:
      example:
        image_repo_uri: image_repo_uri
        should_create_workflow: true
        git_repo: git_repo
        git_repo_id: 0
        git_branch: git_branch
        dockerfile_path: dockerfile_path
        folder_path: folder_path
        registry_id: 6
      properties:
        dockerfile_path:
          type: string
          x-go-name: DockerfilePath
        folder_path:
          type: string
          x-go-name: FolderPath
        git_branch:
          type: string
          x-go-name: GitBranch
        git_repo:
          type: string
          x-go-name: GitRepo
        git_repo_id:
          format: uint64
          type: integer
          x-go-name: GitRepoID
        image_repo_uri:
          type: string
          x-go-name: ImageRepoURI
        registry_id:
          format: uint64
          type: integer
          x-go-name: RegistryID
        should_create_workflow:
          type: boolean
          x-go-name: ShouldCreateWorkflow
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    CreateNamespaceRequest:
      example:
        name: name
      properties:
        name:
          type: string
          x-go-name: Name
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    CreateNamespaceResponse:
      example:
        metadata:
          name: name
      properties:
        metadata:
          $ref: '#/components/schemas/CreateNamespaceResponseMeta'
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    CreateNamespaceResponseMeta:
      example:
        name: name
      properties:
        name:
          type: string
          x-go-name: Name
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    CreateRegistryRepositoryRequest:
      example:
        image_repo_uri: image_repo_uri
      properties:
        image_repo_uri:
          type: string
          x-go-name: ImageRepoURI
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    CreateRegistryRequest:
      example:
        do_integration_id: 5
        azure_integration_id: 6
        gcp_integration_id: 5
        basic_integration_id: 1
        name: name
        acr_name: acr_name
        aws_integration_id: 0
        acr_resource_group_name: acr_resource_group_name
        url: url
      properties:
        acr_name:
          type: string
          x-go-name: ACRName
        acr_resource_group_name:
          description: Additional Azure-specific fields
          type: string
          x-go-name: ACRResourceGroupName
        aws_integration_id:
          format: uint64
          type: integer
          x-go-name: AWSIntegrationID
        azure_integration_id:
          format: uint64
          type: integer
          x-go-name: AzureIntegrationID
        basic_integration_id:
          format: uint64
          type: integer
          x-go-name: BasicIntegrationID
        do_integration_id:
          format: uint64
          type: integer
          x-go-name: DOIntegrationID
        gcp_integration_id:
          format: uint64
          type: integer
          x-go-name: GCPIntegrationID
        name:
          type: string
          x-go-name: Name
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    CreateRegistryResponse:
      $ref: '#/components/schemas/Registry'
    CreateReleaseBaseRequest:
      properties:
        name:
          type: string
          x-go-name: Name
        template_name:
          type: string
          x-go-name: TemplateName
        template_version:
          type: string
          x-go-name: TemplateVersion
        values:
          additionalProperties:
            properties: {}
            type: object
          type: object
          x-go-name: Values
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    CreateReleaseRequest:
      example:
        synced_env_groups:
          - synced_env_groups
          - synced_env_groups
        template_name: template_name
        template_version: template_version
        image_url: image_url
        github_action_config:
          image_repo_uri: image_repo_uri
          should_create_workflow: true
          git_repo: git_repo
          git_repo_id: 0
          git_branch: git_branch
          dockerfile_path: dockerfile_path
          folder_path: folder_path
          registry_id: 6
        values:
          key: "{}"
        name: name
        build_config:
          buildpacks:
            - buildpacks
            - buildpacks
          builder: builder
          config:
            key: "{}"
        tags:
          - tags
          - tags
      properties:
        build_config:
          $ref: '#/components/schemas/CreateBuildConfigRequest'
        github_action_config:
          $ref: '#/components/schemas/CreateGitActionConfigRequest'
        image_url:
          type: string
          x-go-name: ImageURL
        name:
          type: string
          x-go-name: Name
        synced_env_groups:
          items:
            type: string
          type: array
          x-go-name: SyncedEnvGroups
        tags:
          items:
            type: string
          type: array
          x-go-name: Tags
        template_name:
          type: string
          x-go-name: TemplateName
        template_version:
          type: string
          x-go-name: TemplateVersion
        values:
          additionalProperties:
            properties: {}
            type: object
          type: object
          x-go-name: Values
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    CreateStackAppResourceRequest:
      example:
        template_name: template_name
        template_version: template_version
        template_repo_url: template_repo_url
        values:
          key: "{}"
        name: name
        source_config_name: source_config_name
      properties:
        name:
          description: The name of the resource.
          type: string
          x-go-name: Name
        source_config_name:
          description: The name of the source config (must exist inside `source_configs`).
          type: string
          x-go-name: SourceConfigName
        template_name:
          description: "The name of the template in the Helm registry, such as `web`"
          type: string
          x-go-name: TemplateName
        template_repo_url:
          description: "The URL of the Helm registry to pull the template from. If not set, this defaults to `https://charts.getporter.dev`."
          type: string
          x-go-name: TemplateRepoURL
        template_version:
          description: "The version of the template in the Helm registry, such as `v0.50.0`"
          type: string
          x-go-name: TemplateVersion
        values:
          additionalProperties:
            properties: {}
            type: object
          description: The values to pass in to the template.
          type: object
          x-go-name: Values
      required:
        - name
        - source_config_name
        - template_name
        - template_version
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    CreateStackRequest:
      example:
        name: name
        source_configs:
          - image_repo_uri: image_repo_uri
            build:
              git:
                git_integration_kind: git_integration_kind
                git_repo: git_repo
                git_branch: git_branch
                git_integration_id: 1
              method: method
              dockerfile:
                dockerfile_path: dockerfile_path
              buildpack:
                buildpacks:
                  - buildpacks
                  - buildpacks
                builder: builder
              folder_path: folder_path
            name: name
            image_tag: image_tag
          - image_repo_uri: image_repo_uri
            build:
              git:
                git_integration_kind: git_integration_kind
                git_repo: git_repo
                git_branch: git_branch
                git_integration_id: 1
              method: method
              dockerfile:
                dockerfile_path: dockerfile_path
              buildpack:
                buildpacks:
                  - buildpacks
                  - buildpacks
                builder: builder
              folder_path: folder_path
            name: name
            image_tag: image_tag
        app_resources:
          - template_name: template_name
            template_version: template_version
            template_repo_url: template_repo_url
            values:
              key: "{}"
            name: name
            source_config_name: source_config_name
          - template_name: template_name
            template_version: template_version
            template_repo_url: template_repo_url
            values:
              key: "{}"
            name: name
            source_config_name: source_config_name
      properties:
        app_resources:
          description: "A list of app resources to create. An app resource is an application helm chart, such as a `web` or `worker` template."
          items:
            $ref: '#/components/schemas/CreateStackAppResourceRequest'
          type: array
          x-go-name: AppResources
        name:
          description: The display name of the stack
          type: string
          x-go-name: Name
        source_configs:
          description: |-
            A list of configurations which can build an application. Each application resource must use at least one
            source config in order to build application from source. The source config can be specified as a Docker image
            registry or linked to a remote Git repository.
          items:
            $ref: '#/components/schemas/CreateStackSourceConfigRequest'
          type: array
          x-go-name: SourceConfigs
      required:
        - app_resources
        - name
        - source_configs
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    CreateStackSourceConfigRequest:
      example:
        image_repo_uri: image_repo_uri
        build:
          git:
            git_integration_kind: git_integration_kind
            git_repo: git_repo
            git_branch: git_branch
            git_integration_id: 1
          method: method
          dockerfile:
            dockerfile_path: dockerfile_path
          buildpack:
            buildpacks:
              - buildpacks
              - buildpacks
            builder: builder
          folder_path: folder_path
        name: name
        image_tag: image_tag
      properties:
        build:
          $ref: '#/components/schemas/StackSourceConfigBuild'
        image_repo_uri:
          type: string
          x-go-name: ImageRepoURI
        image_tag:
          type: string
          x-go-name: ImageTag
        name:
          type: string
          x-go-name: Name
      required:
        - image_repo_uri
        - image_tag
        - name
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    DeleteNamespaceRequest:
      properties:
        name:
          type: string
          x-go-name: Name
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    Dependency:
      description: "Dependencies can be used to express developer intent, or to capture the state\nof a chart."
      example:
        condition: condition
        name: name
        alias: alias
        repository: repository
        import-values:
          - "{}"
          - "{}"
        version: version
        enabled: true
        tags:
          - tags
          - tags
      properties:
        alias:
          description: Alias usable alias to be used for the chart
          type: string
          x-go-name: Alias
        condition:
          description: "A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )"
          type: string
          x-go-name: Condition
        enabled:
          description: Enabled bool determines if chart should be loaded
          type: boolean
          x-go-name: Enabled
        import-values:
          description: |-
            ImportValues holds the mapping of source values to parent key to be imported. Each item can be a
            string or pair of child/parent sublist items.
          items:
            properties: {}
            type: object
          type: array
          x-go-name: ImportValues
        name:
          description: |-
            Name is the name of the dependency.

            This must mach the name in the dependency's Chart.yaml.
          type: string
          x-go-name: Name
        repository:
          description: |-
            The URL to the repository.

            Appending `index.yaml` to this string should result in a URL that can be
            used to fetch the repository index.
          type: string
          x-go-name: Repository
        tags:
          description: Tags can be used to group charts for enabling/disabling together
          items:
            type: string
          type: array
          x-go-name: Tags
        version:
          description: "Version is the version (range) of this chart.\n\nA lock file will always produce a single version, while a dependency\nmay contain a semantic version range."
          type: string
          x-go-name: Version
      title: Dependency describes a chart upon which another chart depends.
      type: object
      x-go-package: helm.sh/helm/v3/pkg/chart
    FieldsV1:
      description: "Each key is either a '.' representing the field itself, and will always map to an empty set,\nor a string representing a sub-field or item. The string will follow one of these four formats:\n'f:<name>', where <name> is the name of a field in a struct, or key in a map\n'v:<value>', where <value> is the exact json formatted value of a list item\n'i:<index>', where <index> is position of a item in a list\n'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values\nIf a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff\n+protobuf.options.(gogoproto.goproto_stringer)=false"
      title: "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format."
      type: object
      x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
    File:
      description: "By convention, name is a relative path within the scope of the chart's\nbase directory."
      example:
        data:
          - 0
          - 0
        name: name
      properties:
        data:
          description: Data is the template as byte data.
          items:
            format: uint8
            type: integer
          type: array
          x-go-name: Data
        name:
          description: Name is the path-like name of the template.
          type: string
          x-go-name: Name
      title: File represents a file as a name/value pair.
      type: object
      x-go-package: helm.sh/helm/v3/pkg/chart
    FinalizerName:
      title: FinalizerName is the name identifying a finalizer during namespace lifecycle.
      type: string
      x-go-package: k8s.io/api/core/v1
    FormContent:
      description: FormContent is a form's atomic unit
      properties:
        context:
          $ref: '#/components/schemas/FormContext'
        label:
          type: string
          x-go-name: Label
        name:
          type: string
          x-go-name: Name
        placeholder:
          type: string
          x-go-name: Placeholder
        required:
          type: boolean
          x-go-name: Required
        settings:
          $ref: '#/components/schemas/FormContent_settings'
        type:
          type: string
          x-go-name: Type
        value:
          properties: {}
          type: object
          x-go-name: Value
        variable:
          type: string
          x-go-name: Variable
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    FormContext:
      description: FormContext is the target context
      properties:
        config:
          additionalProperties:
            type: string
          type: object
          x-go-name: Config
        type:
          type: string
          x-go-name: Type
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    FormSection:
      description: FormSection is a section of a form
      properties:
        contents:
          items:
            $ref: '#/components/schemas/FormContent'
          type: array
          x-go-name: Contents
        context:
          $ref: '#/components/schemas/FormContext'
        name:
          type: string
          x-go-name: Name
        show_if:
          properties: {}
          type: object
          x-go-name: ShowIf
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    FormTab:
      description: FormTab is a tab rendered in a form
      properties:
        context:
          $ref: '#/components/schemas/FormContext'
        label:
          type: string
          x-go-name: Label
        name:
          type: string
          x-go-name: Name
        sections:
          items:
            $ref: '#/components/schemas/FormSection'
          type: array
          x-go-name: Sections
        settings:
          $ref: '#/components/schemas/FormTab_settings'
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    FormYAML:
      description: FormYAML represents a chart's values.yaml form abstraction
      properties:
        description:
          type: string
          x-go-name: Description
        hasSource:
          type: string
          x-go-name: HasSource
        icon:
          type: string
          x-go-name: Icon
        includeHiddenFields:
          type: string
          x-go-name: IncludeHiddenFields
        isClusterScoped:
          type: boolean
          x-go-name: IsClusterScoped
        name:
          type: string
          x-go-name: Name
        tabs:
          items:
            $ref: '#/components/schemas/FormTab'
          type: array
          x-go-name: Tabs
        tags:
          items:
            type: string
          type: array
          x-go-name: Tags
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    GetNamespaceResponse:
      example:
        metadata:
          name: name
      properties:
        metadata:
          $ref: '#/components/schemas/GetNamespaceResponse_metadata'
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    GetRegistryResponse:
      $ref: '#/components/schemas/Registry'
    GetReleaseResponse:
      $ref: '#/components/schemas/Release'
    GitActionConfig:
      description: GitActionConfig
      properties:
        dockerfile_path:
          description: The path to the dockerfile in the git repo
          type: string
          x-go-name: DockerfilePath
        folder_path:
          description: The build context
          type: string
          x-go-name: FolderPath
        git_branch:
          description: The git branch to use
          type: string
          x-go-name: GitBranch
        git_repo:
          description: "The git repo in ${owner}/${repo} form"
          type: string
          x-go-name: GitRepo
        git_repo_id:
          description: The git integration id
          format: uint64
          type: integer
          x-go-name: GitRepoID
        image_repo_uri:
          description: The complete image repository uri to pull from
          type: string
          x-go-name: ImageRepoURI
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    Hook:
      example:
        path: path
        kind: kind
        manifest: manifest
        name: name
        weight: 1
        last_run:
          phase: phase
          completed_at: 2000-01-23T04:56:07.000+00:00
          started_at: 2000-01-23T04:56:07.000+00:00
        events:
          - null
          - null
        delete_policies:
          - null
          - null
      properties:
        delete_policies:
          description: DeletePolicies are the policies that indicate when to delete the hook
          items:
            $ref: '#/components/schemas/HookDeletePolicy'
          type: array
          x-go-name: DeletePolicies
        events:
          description: Events are the events that this hook fires on.
          items:
            $ref: '#/components/schemas/HookEvent'
          type: array
          x-go-name: Events
        kind:
          description: Kind is the Kubernetes kind.
          type: string
          x-go-name: Kind
        last_run:
          $ref: '#/components/schemas/HookExecution'
        manifest:
          description: Manifest is the manifest contents.
          type: string
          x-go-name: Manifest
        name:
          type: string
          x-go-name: Name
        path:
          description: Path is the chart-relative path to the template.
          type: string
          x-go-name: Path
        weight:
          description: Weight indicates the sort order for execution among similar Hook type
          format: int64
          type: integer
          x-go-name: Weight
      title: Hook defines a hook object.
      type: object
      x-go-package: helm.sh/helm/v3/pkg/release
    HookDeletePolicy:
      description: HookDeletePolicy specifies the hook delete policy
      type: string
      x-go-package: helm.sh/helm/v3/pkg/release
    HookEvent:
      description: HookEvent specifies the hook event
      type: string
      x-go-package: helm.sh/helm/v3/pkg/release
    HookExecution:
      example:
        phase: phase
        completed_at: 2000-01-23T04:56:07.000+00:00
        started_at: 2000-01-23T04:56:07.000+00:00
      properties:
        completed_at:
          description: CompletedAt indicates the date/time this hook was completed.
          format: date-time
          type: string
          x-go-name: CompletedAt
        phase:
          description: A HookPhase indicates the state of a hook execution
          type: string
          x-go-package: helm.sh/helm/v3/pkg/release
        started_at:
          description: StartedAt indicates the date/time this hook was started
          format: date-time
          type: string
          x-go-name: StartedAt
      title: A HookExecution records the result for the last execution of a hook for a given release.
      type: object
      x-go-package: helm.sh/helm/v3/pkg/release
    HookPhase:
      description: A HookPhase indicates the state of a hook execution
      type: string
      x-go-package: helm.sh/helm/v3/pkg/release
    Image:
      description: Image is a Docker image type
      example:
        pushed_at: 2000-01-23T04:56:07.000+00:00
        manifest: manifest
        digest: digest
        tag: tag
        repository_name: repository_name
      properties:
        digest:
          description: The sha256 digest of the image manifest.
          type: string
          x-go-name: Digest
        manifest:
          description: The image manifest associated with the image.
          type: string
          x-go-name: Manifest
        pushed_at:
          description: When the image was pushed
          format: date-time
          type: string
          x-go-name: PushedAt
        repository_name:
          description: The name of the repository associated with the image.
          type: string
          x-go-name: RepositoryName
        tag:
          description: The tag used for the image.
          type: string
          x-go-name: Tag
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    Info:
      example:
        last_deployed: 2000-01-23T04:56:07.000+00:00
        deleted: 2000-01-23T04:56:07.000+00:00
        notes: notes
        first_deployed: 2000-01-23T04:56:07.000+00:00
        description: description
        status: status
      properties:
        deleted:
          description: Deleted tracks when this object was deleted.
          format: date-time
          type: string
          x-go-name: Deleted
        description:
          description: Description is human-friendly "log entry" about this release.
          type: string
          x-go-name: Description
        first_deployed:
          description: FirstDeployed is when the release was first deployed.
          format: date-time
          type: string
          x-go-name: FirstDeployed
        last_deployed:
          description: LastDeployed is when the release was last deployed.
          format: date-time
          type: string
          x-go-name: LastDeployed
        notes:
          description: Contains the rendered templates/NOTES.txt if available
          type: string
          x-go-name: Notes
        status:
          description: Status is the status of a release
          type: string
          x-go-package: helm.sh/helm/v3/pkg/release
      title: Info describes release information.
      type: object
      x-go-package: helm.sh/helm/v3/pkg/release
    ListImagesResponse:
      items:
        $ref: '#/components/schemas/Image'
      type: array
      x-go-name: ListImageResponse
      x-go-package: github.com/porter-dev/porter/api/types
    ListMeta:
      description: "ListMeta describes metadata that synthetic resources must have, including lists and\nvarious status objects. A resource may have only one of {ObjectMeta, ListMeta}."
      properties:
        continue:
          description: "continue may be set if the user set a limit on the number of items returned, and indicates that\nthe server has more data available. The value is opaque and may be used to issue another request\nto the endpoint that served this list to retrieve the next set of available objects. Continuing a\nconsistent list may not be possible if the server configuration has changed or more than a few\nminutes have passed. The resourceVersion field returned when using this continue value will be\nidentical to the value in the first response, unless you have received this token from an error\nmessage."
          type: string
          x-go-name: Continue
        remainingItemCount:
          description: "remainingItemCount is the number of subsequent items in the list which are not included in this\nlist response. If the list request contained label or field selectors, then the number of\nremaining items is unknown and the field will be left unset and omitted during serialization.\nIf the list is complete (either because it is not chunking or because this is the last chunk),\nthen there are no more remaining items and this field will be left unset and omitted during\nserialization.\nServers older than v1.15 do not set this field.\nThe intended use of the remainingItemCount is *estimating* the size of a collection. Clients\nshould not rely on the remainingItemCount to be set or to be exact.\n+optional"
          format: int64
          type: integer
          x-go-name: RemainingItemCount
        resourceVersion:
          description: "String that identifies the server's internal version of this object that\ncan be used by clients to determine when objects have changed.\nValue must be treated as opaque by clients and passed unmodified back to the server.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
          type: string
          x-go-name: ResourceVersion
        selfLink:
          description: |-
            selfLink is a URL representing this object.
            Populated by the system.
            Read-only.

            DEPRECATED
            Kubernetes will stop propagating this field in 1.20 release and the field is planned
            to be removed in 1.21 release.
            +optional
          type: string
          x-go-name: SelfLink
      type: object
      x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
    ListNamespacesResponse:
      example:
        apiVersion: apiVersion
        remainingItemCount: 1
        continue: continue
        kind: kind
        resourceVersion: resourceVersion
        items:
          - generation: 6
            finalizers:
              - finalizers
              - finalizers
            kind: kind
            resourceVersion: resourceVersion
            annotations:
              key: annotations
            generateName: generateName
            spec:
              finalizers:
                - null
                - null
            deletionTimestamp: 2000-01-23T04:56:07.000+00:00
            labels:
              key: labels
            ownerReferences:
              - uid: uid
                controller: true
                apiVersion: apiVersion
                kind: kind
                name: name
                blockOwnerDeletion: true
              - uid: uid
                controller: true
                apiVersion: apiVersion
                kind: kind
                name: name
                blockOwnerDeletion: true
            selfLink: selfLink
            deletionGracePeriodSeconds: 0
            uid: uid
            apiVersion: apiVersion
            managedFields:
              - apiVersion: apiVersion
                fieldsV1: "{}"
                manager: manager
                subresource: subresource
                time: 2000-01-23T04:56:07.000+00:00
                operation: operation
                fieldsType: fieldsType
              - apiVersion: apiVersion
                fieldsV1: "{}"
                manager: manager
                subresource: subresource
                time: 2000-01-23T04:56:07.000+00:00
                operation: operation
                fieldsType: fieldsType
            clusterName: clusterName
            creationTimestamp: 2000-01-23T04:56:07.000+00:00
            name: name
            namespace: namespace
            status:
              phase: phase
              conditions:
                - reason: reason
                  lastTransitionTime: 2000-01-23T04:56:07.000+00:00
                  message: message
                  type: type
                  status: status
                - reason: reason
                  lastTransitionTime: 2000-01-23T04:56:07.000+00:00
                  message: message
                  type: type
                  status: status
          - generation: 6
            finalizers:
              - finalizers
              - finalizers
            kind: kind
            resourceVersion: resourceVersion
            annotations:
              key: annotations
            generateName: generateName
            spec:
              finalizers:
                - null
                - null
            deletionTimestamp: 2000-01-23T04:56:07.000+00:00
            labels:
              key: labels
            ownerReferences:
              - uid: uid
                controller: true
                apiVersion: apiVersion
                kind: kind
                name: name
                blockOwnerDeletion: true
              - uid: uid
                controller: true
                apiVersion: apiVersion
                kind: kind
                name: name
                blockOwnerDeletion: true
            selfLink: selfLink
            deletionGracePeriodSeconds: 0
            uid: uid
            apiVersion: apiVersion
            managedFields:
              - apiVersion: apiVersion
                fieldsV1: "{}"
                manager: manager
                subresource: subresource
                time: 2000-01-23T04:56:07.000+00:00
                operation: operation
                fieldsType: fieldsType
              - apiVersion: apiVersion
                fieldsV1: "{}"
                manager: manager
                subresource: subresource
                time: 2000-01-23T04:56:07.000+00:00
                operation: operation
                fieldsType: fieldsType
            clusterName: clusterName
            creationTimestamp: 2000-01-23T04:56:07.000+00:00
            name: name
            namespace: namespace
            status:
              phase: phase
              conditions:
                - reason: reason
                  lastTransitionTime: 2000-01-23T04:56:07.000+00:00
                  message: message
                  type: type
                  status: status
                - reason: reason
                  lastTransitionTime: 2000-01-23T04:56:07.000+00:00
                  message: message
                  type: type
                  status: status
        selfLink: selfLink
      properties:
        apiVersion:
          description: "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional"
          type: string
          x-go-name: APIVersion
        continue:
          description: "continue may be set if the user set a limit on the number of items returned, and indicates that\nthe server has more data available. The value is opaque and may be used to issue another request\nto the endpoint that served this list to retrieve the next set of available objects. Continuing a\nconsistent list may not be possible if the server configuration has changed or more than a few\nminutes have passed. The resourceVersion field returned when using this continue value will be\nidentical to the value in the first response, unless you have received this token from an error\nmessage."
          type: string
          x-go-name: Continue
        items:
          description: "Items is the list of Namespace objects in the list.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
          items:
            $ref: '#/components/schemas/Namespace'
          type: array
          x-go-name: Items
        kind:
          description: "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional"
          type: string
          x-go-name: Kind
        remainingItemCount:
          description: "remainingItemCount is the number of subsequent items in the list which are not included in this\nlist response. If the list request contained label or field selectors, then the number of\nremaining items is unknown and the field will be left unset and omitted during serialization.\nIf the list is complete (either because it is not chunking or because this is the last chunk),\nthen there are no more remaining items and this field will be left unset and omitted during\nserialization.\nServers older than v1.15 do not set this field.\nThe intended use of the remainingItemCount is *estimating* the size of a collection. Clients\nshould not rely on the remainingItemCount to be set or to be exact.\n+optional"
          format: int64
          type: integer
          x-go-name: RemainingItemCount
        resourceVersion:
          description: "String that identifies the server's internal version of this object that\ncan be used by clients to determine when objects have changed.\nValue must be treated as opaque by clients and passed unmodified back to the server.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
          type: string
          x-go-name: ResourceVersion
        selfLink:
          description: |-
            selfLink is a URL representing this object.
            Populated by the system.
            Read-only.

            DEPRECATED
            Kubernetes will stop propagating this field in 1.20 release and the field is planned
            to be removed in 1.21 release.
            +optional
          type: string
          x-go-name: SelfLink
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    ListRegistriesResponse:
      items:
        $ref: '#/components/schemas/Registry'
      type: array
      x-go-name: RegistryListResponse
      x-go-package: github.com/porter-dev/porter/api/types
    ListRegistryRepositoriesResponse:
      items:
        $ref: '#/components/schemas/RegistryRepository'
      type: array
      x-go-name: ListRegistryRepositoryResponse
      x-go-package: github.com/porter-dev/porter/api/types
    ListReleasesResponse:
      items:
        $ref: '#/components/schemas/Release'
      type: array
      x-go-package: github.com/porter-dev/porter/api/types
    Lock:
      description: It represents the state that the dependencies should be in.
      example:
        generated: 2000-01-23T04:56:07.000+00:00
        digest: digest
        dependencies:
          - condition: condition
            name: name
            alias: alias
            repository: repository
            import-values:
              - "{}"
              - "{}"
            version: version
            enabled: true
            tags:
              - tags
              - tags
          - condition: condition
            name: name
            alias: alias
            repository: repository
            import-values:
              - "{}"
              - "{}"
            version: version
            enabled: true
            tags:
              - tags
              - tags
      properties:
        dependencies:
          description: Dependencies is the list of dependencies that this lock file has locked.
          items:
            $ref: '#/components/schemas/Dependency'
          type: array
          x-go-name: Dependencies
        digest:
          description: Digest is a hash of the dependencies in Chart.yaml.
          type: string
          x-go-name: Digest
        generated:
          description: Generated is the date the lock file was last generated.
          format: date-time
          type: string
          x-go-name: Generated
      title: Lock is a lock file for dependencies.
      type: object
      x-go-package: helm.sh/helm/v3/pkg/chart
    Maintainer:
      example:
        name: name
        email: email
        url: url
      properties:
        email:
          description: Email is an optional email address to contact the named maintainer
          type: string
          x-go-name: Email
        name:
          description: Name is a user name or organization name
          type: string
          x-go-name: Name
        url:
          description: URL is an optional URL to an address for the named maintainer
          type: string
          x-go-name: URL
      title: Maintainer describes a Chart maintainer.
      type: object
      x-go-package: helm.sh/helm/v3/pkg/chart
    ManagedFieldsEntry:
      description: "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource\nthat the fieldset applies to."
      example:
        apiVersion: apiVersion
        fieldsV1: "{}"
        manager: manager
        subresource: subresource
        time: 2000-01-23T04:56:07.000+00:00
        operation: operation
        fieldsType: fieldsType
      properties:
        apiVersion:
          description: |-
            APIVersion defines the version of this resource that this field set
            applies to. The format is "group/version" just like the top-level
            APIVersion field. It is necessary to track the version of a field
            set because it cannot be automatically converted.
          type: string
          x-go-name: APIVersion
        fieldsType:
          description: "FieldsType is the discriminator for the different fields format and version.\nThere is currently only one possible value: \"FieldsV1\""
          type: string
          x-go-name: FieldsType
        fieldsV1:
          description: "Each key is either a '.' representing the field itself, and will always map to an empty set,\nor a string representing a sub-field or item. The string will follow one of these four formats:\n'f:<name>', where <name> is the name of a field in a struct, or key in a map\n'v:<value>', where <value> is the exact json formatted value of a list item\n'i:<index>', where <index> is position of a item in a list\n'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values\nIf a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff\n+protobuf.options.(gogoproto.goproto_stringer)=false"
          title: "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format."
          type: object
          x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
        manager:
          description: Manager is an identifier of the workflow managing these fields.
          type: string
          x-go-name: Manager
        operation:
          title: ManagedFieldsOperationType is the type of operation which lead to a ManagedFieldsEntry being created.
          type: string
          x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
        subresource:
          description: "Subresource is the name of the subresource used to update that object, or\nempty string if the object was updated through the main resource. The\nvalue of this field is used to distinguish between managers, even if they\nshare the same name. For example, a status update will be distinct from a\nregular update using the same manager name.\nNote that the APIVersion field is not related to the Subresource field and\nit always corresponds to the version of the main resource."
          type: string
          x-go-name: Subresource
        time:
          description: "Programs using times should typically store and pass them as values,\nnot pointers. That is, time variables and struct fields should be of\ntype time.Time, not *time.Time.\n\nA Time value can be used by multiple goroutines simultaneously except\nthat the methods GobDecode, UnmarshalBinary, UnmarshalJSON and\nUnmarshalText are not concurrency-safe.\n\nTime instants can be compared using the Before, After, and Equal methods.\nThe Sub method subtracts two instants, producing a Duration.\nThe Add method adds a Time and a Duration, producing a Time.\n\nThe zero value of type Time is January 1, year 1, 00:00:00.000000000 UTC.\nAs this time is unlikely to come up in practice, the IsZero method gives\na simple way of detecting a time that has not been initialized explicitly.\n\nEach Time has associated with it a Location, consulted when computing the\npresentation form of the time, such as in the Format, Hour, and Year methods.\nThe methods Local, UTC, and In return a Time with a specific location.\nChanging the location in this way changes only the presentation; it does not\nchange the instant in time being denoted and therefore does not affect the\ncomputations described in earlier paragraphs.\n\nRepresentations of a Time value saved by the GobEncode, MarshalBinary,\nMarshalJSON, and MarshalText methods store the Time.Location's offset, but not\nthe location name. They therefore lose information about Daylight Saving Time.\n\nIn addition to the required “wall clock” reading, a Time may contain an optional\nreading of the current process's monotonic clock, to provide additional precision\nfor comparison or subtraction.\nSee the “Monotonic Clocks” section in the package documentation for details.\n\nNote that the Go == operator compares not just the time instant but also the\nLocation and the monotonic clock reading. Therefore, Time values should not\nbe used as map or database keys without first guaranteeing that the\nidentical Location has been set for all values, which can be achieved\nthrough use of the UTC or Local method, and that the monotonic clock reading\nhas been stripped by setting t = t.Round(0). In general, prefer t.Equal(u)\nto t == u, since t.Equal uses the most accurate comparison available and\ncorrectly handles the case when only one of its arguments has a monotonic\nclock reading."
          format: date-time
          title: A Time represents an instant in time with nanosecond precision.
          type: string
          x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
      type: object
      x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
    ManagedFieldsOperationType:
      title: ManagedFieldsOperationType is the type of operation which lead to a ManagedFieldsEntry being created.
      type: string
      x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
    Metadata:
      example:
        maintainers:
          - name: name
            email: email
            url: url
          - name: name
            email: email
            url: url
        appVersion: appVersion
        keywords:
          - keywords
          - keywords
        sources:
          - sources
          - sources
        deprecated: true
        icon: icon
        annotations:
          key: annotations
        description: description
        type: type
        version: version
        dependencies:
          - condition: condition
            name: name
            alias: alias
            repository: repository
            import-values:
              - "{}"
              - "{}"
            version: version
            enabled: true
            tags:
              - tags
              - tags
          - condition: condition
            name: name
            alias: alias
            repository: repository
            import-values:
              - "{}"
              - "{}"
            version: version
            enabled: true
            tags:
              - tags
              - tags
        home: home
        tags: tags
        condition: condition
        apiVersion: apiVersion
        kubeVersion: kubeVersion
        name: name
      properties:
        annotations:
          additionalProperties:
            type: string
          description: "Annotations are additional mappings uninterpreted by Helm,\nmade available for inspection by other applications."
          type: object
          x-go-name: Annotations
        apiVersion:
          description: The API Version of this chart. Required.
          type: string
          x-go-name: APIVersion
        appVersion:
          description: The version of the application enclosed inside of this chart.
          type: string
          x-go-name: AppVersion
        condition:
          description: The condition to check to enable chart
          type: string
          x-go-name: Condition
        dependencies:
          description: Dependencies are a list of dependencies for a chart.
          items:
            $ref: '#/components/schemas/Dependency'
          type: array
          x-go-name: Dependencies
        deprecated:
          description: Whether or not this chart is deprecated
          type: boolean
          x-go-name: Deprecated
        description:
          description: A one-sentence description of the chart
          type: string
          x-go-name: Description
        home:
          description: "The URL to a relevant project page, git repo, or contact person"
          type: string
          x-go-name: Home
        icon:
          description: The URL to an icon file.
          type: string
          x-go-name: Icon
        keywords:
          description: A list of string keywords
          items:
            type: string
          type: array
          x-go-name: Keywords
        kubeVersion:
          description: KubeVersion is a SemVer constraint specifying the version of Kubernetes required.
          type: string
          x-go-name: KubeVersion
        maintainers:
          description: A list of name and URL/email address combinations for the maintainer(s)
          items:
            $ref: '#/components/schemas/Maintainer'
          type: array
          x-go-name: Maintainers
        name:
          description: The name of the chart. Required.
          type: string
          x-go-name: Name
        sources:
          description: Source is the URL to the source code of this chart
          items:
            type: string
          type: array
          x-go-name: Sources
        tags:
          description: The tags to check to enable chart
          type: string
          x-go-name: Tags
        type:
          description: "Specifies the chart type: application or library"
          type: string
          x-go-name: Type
        version:
          description: A SemVer 2 conformant version string of the chart. Required.
          type: string
          x-go-name: Version
      title: Metadata for a Chart file. This models the structure of a Chart.yaml file.
      type: object
      x-go-package: helm.sh/helm/v3/pkg/chart
    Namespace:
      description: Use of multiple namespaces is optional.
      example:
        generation: 6
        finalizers:
          - finalizers
          - finalizers
        kind: kind
        resourceVersion: resourceVersion
        annotations:
          key: annotations
        generateName: generateName
        spec:
          finalizers:
            - null
            - null
        deletionTimestamp: 2000-01-23T04:56:07.000+00:00
        labels:
          key: labels
        ownerReferences:
          - uid: uid
            controller: true
            apiVersion: apiVersion
            kind: kind
            name: name
            blockOwnerDeletion: true
          - uid: uid
            controller: true
            apiVersion: apiVersion
            kind: kind
            name: name
            blockOwnerDeletion: true
        selfLink: selfLink
        deletionGracePeriodSeconds: 0
        uid: uid
        apiVersion: apiVersion
        managedFields:
          - apiVersion: apiVersion
            fieldsV1: "{}"
            manager: manager
            subresource: subresource
            time: 2000-01-23T04:56:07.000+00:00
            operation: operation
            fieldsType: fieldsType
          - apiVersion: apiVersion
            fieldsV1: "{}"
            manager: manager
            subresource: subresource
            time: 2000-01-23T04:56:07.000+00:00
            operation: operation
            fieldsType: fieldsType
        clusterName: clusterName
        creationTimestamp: 2000-01-23T04:56:07.000+00:00
        name: name
        namespace: namespace
        status:
          phase: phase
          conditions:
            - reason: reason
              lastTransitionTime: 2000-01-23T04:56:07.000+00:00
              message: message
              type: type
              status: status
            - reason: reason
              lastTransitionTime: 2000-01-23T04:56:07.000+00:00
              message: message
              type: type
              status: status
      properties:
        annotations:
          additionalProperties:
            type: string
          description: "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations\n+optional"
          type: object
          x-go-name: Annotations
        apiVersion:
          description: "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional"
          type: string
          x-go-name: APIVersion
        clusterName:
          description: |-
            The name of the cluster which the object belongs to.
            This is used to distinguish resources with same name and namespace in different clusters.
            This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
            +optional
          type: string
          x-go-name: ClusterName
        creationTimestamp:
          description: "Programs using times should typically store and pass them as values,\nnot pointers. That is, time variables and struct fields should be of\ntype time.Time, not *time.Time.\n\nA Time value can be used by multiple goroutines simultaneously except\nthat the methods GobDecode, UnmarshalBinary, UnmarshalJSON and\nUnmarshalText are not concurrency-safe.\n\nTime instants can be compared using the Before, After, and Equal methods.\nThe Sub method subtracts two instants, producing a Duration.\nThe Add method adds a Time and a Duration, producing a Time.\n\nThe zero value of type Time is January 1, year 1, 00:00:00.000000000 UTC.\nAs this time is unlikely to come up in practice, the IsZero method gives\na simple way of detecting a time that has not been initialized explicitly.\n\nEach Time has associated with it a Location, consulted when computing the\npresentation form of the time, such as in the Format, Hour, and Year methods.\nThe methods Local, UTC, and In return a Time with a specific location.\nChanging the location in this way changes only the presentation; it does not\nchange the instant in time being denoted and therefore does not affect the\ncomputations described in earlier paragraphs.\n\nRepresentations of a Time value saved by the GobEncode, MarshalBinary,\nMarshalJSON, and MarshalText methods store the Time.Location's offset, but not\nthe location name. They therefore lose information about Daylight Saving Time.\n\nIn addition to the required “wall clock” reading, a Time may contain an optional\nreading of the current process's monotonic clock, to provide additional precision\nfor comparison or subtraction.\nSee the “Monotonic Clocks” section in the package documentation for details.\n\nNote that the Go == operator compares not just the time instant but also the\nLocation and the monotonic clock reading. Therefore, Time values should not\nbe used as map or database keys without first guaranteeing that the\nidentical Location has been set for all values, which can be achieved\nthrough use of the UTC or Local method, and that the monotonic clock reading\nhas been stripped by setting t = t.Round(0). In general, prefer t.Equal(u)\nto t == u, since t.Equal uses the most accurate comparison available and\ncorrectly handles the case when only one of its arguments has a monotonic\nclock reading."
          format: date-time
          title: A Time represents an instant in time with nanosecond precision.
          type: string
          x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
        deletionGracePeriodSeconds:
          description: |-
            Number of seconds allowed for this object to gracefully terminate before
            it will be removed from the system. Only set when deletionTimestamp is also set.
            May only be shortened.
            Read-only.
            +optional
          format: int64
          type: integer
          x-go-name: DeletionGracePeriodSeconds
        deletionTimestamp:
          description: "Programs using times should typically store and pass them as values,\nnot pointers. That is, time variables and struct fields should be of\ntype time.Time, not *time.Time.\n\nA Time value can be used by multiple goroutines simultaneously except\nthat the methods GobDecode, UnmarshalBinary, UnmarshalJSON and\nUnmarshalText are not concurrency-safe.\n\nTime instants can be compared using the Before, After, and Equal methods.\nThe Sub method subtracts two instants, producing a Duration.\nThe Add method adds a Time and a Duration, producing a Time.\n\nThe zero value of type Time is January 1, year 1, 00:00:00.000000000 UTC.\nAs this time is unlikely to come up in practice, the IsZero method gives\na simple way of detecting a time that has not been initialized explicitly.\n\nEach Time has associated with it a Location, consulted when computing the\npresentation form of the time, such as in the Format, Hour, and Year methods.\nThe methods Local, UTC, and In return a Time with a specific location.\nChanging the location in this way changes only the presentation; it does not\nchange the instant in time being denoted and therefore does not affect the\ncomputations described in earlier paragraphs.\n\nRepresentations of a Time value saved by the GobEncode, MarshalBinary,\nMarshalJSON, and MarshalText methods store the Time.Location's offset, but not\nthe location name. They therefore lose information about Daylight Saving Time.\n\nIn addition to the required “wall clock” reading, a Time may contain an optional\nreading of the current process's monotonic clock, to provide additional precision\nfor comparison or subtraction.\nSee the “Monotonic Clocks” section in the package documentation for details.\n\nNote that the Go == operator compares not just the time instant but also the\nLocation and the monotonic clock reading. Therefore, Time values should not\nbe used as map or database keys without first guaranteeing that the\nidentical Location has been set for all values, which can be achieved\nthrough use of the UTC or Local method, and that the monotonic clock reading\nhas been stripped by setting t = t.Round(0). In general, prefer t.Equal(u)\nto t == u, since t.Equal uses the most accurate comparison available and\ncorrectly handles the case when only one of its arguments has a monotonic\nclock reading."
          format: date-time
          title: A Time represents an instant in time with nanosecond precision.
          type: string
          x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
        finalizers:
          description: "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge"
          items:
            type: string
          type: array
          x-go-name: Finalizers
        generateName:
          description: "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will\nNOT return a 409 - instead, it will either return 201 Created or 500 with Reason\nServerTimeout indicating a unique name could not be found in the time allotted, and the client\nshould retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional"
          type: string
          x-go-name: GenerateName
        generation:
          description: |-
            A sequence number representing a specific generation of the desired state.
            Populated by the system. Read-only.
            +optional
          format: int64
          type: integer
          x-go-name: Generation
        kind:
          description: "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional"
          type: string
          x-go-name: Kind
        labels:
          additionalProperties:
            type: string
          description: "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels\n+optional"
          type: object
          x-go-name: Labels
        managedFields:
          description: "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional"
          items:
            $ref: '#/components/schemas/ManagedFieldsEntry'
          type: array
          x-go-name: ManagedFields
        name:
          description: "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional"
          type: string
          x-go-name: Name
        namespace:
          description: "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/namespaces\n+optional"
          type: string
          x-go-name: Namespace
        ownerReferences:
          description: "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge"
          items:
            $ref: '#/components/schemas/OwnerReference'
          type: array
          x-go-name: OwnerReferences
        resourceVersion:
          description: "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
          type: string
          x-go-name: ResourceVersion
        selfLink:
          description: |-
            SelfLink is a URL representing this object.
            Populated by the system.
            Read-only.

            DEPRECATED
            Kubernetes will stop propagating this field in 1.20 release and the field is planned
            to be removed in 1.21 release.
            +optional
          type: string
          x-go-name: SelfLink
        spec:
          $ref: '#/components/schemas/NamespaceSpec'
        status:
          $ref: '#/components/schemas/NamespaceStatus'
        uid:
          description: "UID is a type that holds unique ID values, including UUIDs.  Because we\ndon't ONLY use UUIDs, this is an alias to string.  Being a type captures\nintent and helps make sure that UIDs and names do not get conflated."
          type: string
          x-go-package: k8s.io/apimachinery/pkg/types
      title: Namespace provides a scope for Names.
      type: object
      x-go-package: k8s.io/api/core/v1
    NamespaceCondition:
      example:
        reason: reason
        lastTransitionTime: 2000-01-23T04:56:07.000+00:00
        message: message
        type: type
        status: status
      properties:
        lastTransitionTime:
          description: "Programs using times should typically store and pass them as values,\nnot pointers. That is, time variables and struct fields should be of\ntype time.Time, not *time.Time.\n\nA Time value can be used by multiple goroutines simultaneously except\nthat the methods GobDecode, UnmarshalBinary, UnmarshalJSON and\nUnmarshalText are not concurrency-safe.\n\nTime instants can be compared using the Before, After, and Equal methods.\nThe Sub method subtracts two instants, producing a Duration.\nThe Add method adds a Time and a Duration, producing a Time.\n\nThe zero value of type Time is January 1, year 1, 00:00:00.000000000 UTC.\nAs this time is unlikely to come up in practice, the IsZero method gives\na simple way of detecting a time that has not been initialized explicitly.\n\nEach Time has associated with it a Location, consulted when computing the\npresentation form of the time, such as in the Format, Hour, and Year methods.\nThe methods Local, UTC, and In return a Time with a specific location.\nChanging the location in this way changes only the presentation; it does not\nchange the instant in time being denoted and therefore does not affect the\ncomputations described in earlier paragraphs.\n\nRepresentations of a Time value saved by the GobEncode, MarshalBinary,\nMarshalJSON, and MarshalText methods store the Time.Location's offset, but not\nthe location name. They therefore lose information about Daylight Saving Time.\n\nIn addition to the required “wall clock” reading, a Time may contain an optional\nreading of the current process's monotonic clock, to provide additional precision\nfor comparison or subtraction.\nSee the “Monotonic Clocks” section in the package documentation for details.\n\nNote that the Go == operator compares not just the time instant but also the\nLocation and the monotonic clock reading. Therefore, Time values should not\nbe used as map or database keys without first guaranteeing that the\nidentical Location has been set for all values, which can be achieved\nthrough use of the UTC or Local method, and that the monotonic clock reading\nhas been stripped by setting t = t.Round(0). In general, prefer t.Equal(u)\nto t == u, since t.Equal uses the most accurate comparison available and\ncorrectly handles the case when only one of its arguments has a monotonic\nclock reading."
          format: date-time
          title: A Time represents an instant in time with nanosecond precision.
          type: string
          x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
        message:
          description: +optional
          type: string
          x-go-name: Message
        reason:
          description: +optional
          type: string
          x-go-name: Reason
        status:
          type: string
          x-go-package: k8s.io/api/core/v1
        type:
          description: +enum
          type: string
          x-go-package: k8s.io/api/core/v1
      title: NamespaceCondition contains details about state of namespace.
      type: object
      x-go-package: k8s.io/api/core/v1
    NamespaceConditionType:
      description: +enum
      type: string
      x-go-package: k8s.io/api/core/v1
    NamespaceList:
      properties:
        apiVersion:
          description: "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional"
          type: string
          x-go-name: APIVersion
        continue:
          description: "continue may be set if the user set a limit on the number of items returned, and indicates that\nthe server has more data available. The value is opaque and may be used to issue another request\nto the endpoint that served this list to retrieve the next set of available objects. Continuing a\nconsistent list may not be possible if the server configuration has changed or more than a few\nminutes have passed. The resourceVersion field returned when using this continue value will be\nidentical to the value in the first response, unless you have received this token from an error\nmessage."
          type: string
          x-go-name: Continue
        items:
          description: "Items is the list of Namespace objects in the list.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
          items:
            $ref: '#/components/schemas/Namespace'
          type: array
          x-go-name: Items
        kind:
          description: "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional"
          type: string
          x-go-name: Kind
        remainingItemCount:
          description: "remainingItemCount is the number of subsequent items in the list which are not included in this\nlist response. If the list request contained label or field selectors, then the number of\nremaining items is unknown and the field will be left unset and omitted during serialization.\nIf the list is complete (either because it is not chunking or because this is the last chunk),\nthen there are no more remaining items and this field will be left unset and omitted during\nserialization.\nServers older than v1.15 do not set this field.\nThe intended use of the remainingItemCount is *estimating* the size of a collection. Clients\nshould not rely on the remainingItemCount to be set or to be exact.\n+optional"
          format: int64
          type: integer
          x-go-name: RemainingItemCount
        resourceVersion:
          description: "String that identifies the server's internal version of this object that\ncan be used by clients to determine when objects have changed.\nValue must be treated as opaque by clients and passed unmodified back to the server.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
          type: string
          x-go-name: ResourceVersion
        selfLink:
          description: |-
            selfLink is a URL representing this object.
            Populated by the system.
            Read-only.

            DEPRECATED
            Kubernetes will stop propagating this field in 1.20 release and the field is planned
            to be removed in 1.21 release.
            +optional
          type: string
          x-go-name: SelfLink
      title: NamespaceList is a list of Namespaces.
      type: object
      x-go-package: k8s.io/api/core/v1
    NamespacePhase:
      description: +enum
      type: string
      x-go-package: k8s.io/api/core/v1
    NamespaceSpec:
      example:
        finalizers:
          - null
          - null
      properties:
        finalizers:
          description: "Finalizers is an opaque list of values that must be empty to permanently remove object from storage.\nMore info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/\n+optional"
          items:
            $ref: '#/components/schemas/FinalizerName'
          type: array
          x-go-name: Finalizers
      title: NamespaceSpec describes the attributes on a Namespace.
      type: object
      x-go-package: k8s.io/api/core/v1
    NamespaceStatus:
      example:
        phase: phase
        conditions:
          - reason: reason
            lastTransitionTime: 2000-01-23T04:56:07.000+00:00
            message: message
            type: type
            status: status
          - reason: reason
            lastTransitionTime: 2000-01-23T04:56:07.000+00:00
            message: message
            type: type
            status: status
      properties:
        conditions:
          description: |-
            Represents the latest available observations of a namespace's current state.
            +optional
            +patchMergeKey=type
            +patchStrategy=merge
          items:
            $ref: '#/components/schemas/NamespaceCondition'
          type: array
          x-go-name: Conditions
        phase:
          description: +enum
          type: string
          x-go-package: k8s.io/api/core/v1
      title: NamespaceStatus is information about the current status of a Namespace.
      type: object
      x-go-package: k8s.io/api/core/v1
    ObjectMeta:
      description: "ObjectMeta is metadata that all persisted resources must have, which includes all objects\nusers must create."
      properties:
        annotations:
          additionalProperties:
            type: string
          description: "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations\n+optional"
          type: object
          x-go-name: Annotations
        clusterName:
          description: |-
            The name of the cluster which the object belongs to.
            This is used to distinguish resources with same name and namespace in different clusters.
            This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
            +optional
          type: string
          x-go-name: ClusterName
        creationTimestamp:
          description: "Programs using times should typically store and pass them as values,\nnot pointers. That is, time variables and struct fields should be of\ntype time.Time, not *time.Time.\n\nA Time value can be used by multiple goroutines simultaneously except\nthat the methods GobDecode, UnmarshalBinary, UnmarshalJSON and\nUnmarshalText are not concurrency-safe.\n\nTime instants can be compared using the Before, After, and Equal methods.\nThe Sub method subtracts two instants, producing a Duration.\nThe Add method adds a Time and a Duration, producing a Time.\n\nThe zero value of type Time is January 1, year 1, 00:00:00.000000000 UTC.\nAs this time is unlikely to come up in practice, the IsZero method gives\na simple way of detecting a time that has not been initialized explicitly.\n\nEach Time has associated with it a Location, consulted when computing the\npresentation form of the time, such as in the Format, Hour, and Year methods.\nThe methods Local, UTC, and In return a Time with a specific location.\nChanging the location in this way changes only the presentation; it does not\nchange the instant in time being denoted and therefore does not affect the\ncomputations described in earlier paragraphs.\n\nRepresentations of a Time value saved by the GobEncode, MarshalBinary,\nMarshalJSON, and MarshalText methods store the Time.Location's offset, but not\nthe location name. They therefore lose information about Daylight Saving Time.\n\nIn addition to the required “wall clock” reading, a Time may contain an optional\nreading of the current process's monotonic clock, to provide additional precision\nfor comparison or subtraction.\nSee the “Monotonic Clocks” section in the package documentation for details.\n\nNote that the Go == operator compares not just the time instant but also the\nLocation and the monotonic clock reading. Therefore, Time values should not\nbe used as map or database keys without first guaranteeing that the\nidentical Location has been set for all values, which can be achieved\nthrough use of the UTC or Local method, and that the monotonic clock reading\nhas been stripped by setting t = t.Round(0). In general, prefer t.Equal(u)\nto t == u, since t.Equal uses the most accurate comparison available and\ncorrectly handles the case when only one of its arguments has a monotonic\nclock reading."
          format: date-time
          title: A Time represents an instant in time with nanosecond precision.
          type: string
          x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
        deletionGracePeriodSeconds:
          description: |-
            Number of seconds allowed for this object to gracefully terminate before
            it will be removed from the system. Only set when deletionTimestamp is also set.
            May only be shortened.
            Read-only.
            +optional
          format: int64
          type: integer
          x-go-name: DeletionGracePeriodSeconds
        deletionTimestamp:
          description: "Programs using times should typically store and pass them as values,\nnot pointers. That is, time variables and struct fields should be of\ntype time.Time, not *time.Time.\n\nA Time value can be used by multiple goroutines simultaneously except\nthat the methods GobDecode, UnmarshalBinary, UnmarshalJSON and\nUnmarshalText are not concurrency-safe.\n\nTime instants can be compared using the Before, After, and Equal methods.\nThe Sub method subtracts two instants, producing a Duration.\nThe Add method adds a Time and a Duration, producing a Time.\n\nThe zero value of type Time is January 1, year 1, 00:00:00.000000000 UTC.\nAs this time is unlikely to come up in practice, the IsZero method gives\na simple way of detecting a time that has not been initialized explicitly.\n\nEach Time has associated with it a Location, consulted when computing the\npresentation form of the time, such as in the Format, Hour, and Year methods.\nThe methods Local, UTC, and In return a Time with a specific location.\nChanging the location in this way changes only the presentation; it does not\nchange the instant in time being denoted and therefore does not affect the\ncomputations described in earlier paragraphs.\n\nRepresentations of a Time value saved by the GobEncode, MarshalBinary,\nMarshalJSON, and MarshalText methods store the Time.Location's offset, but not\nthe location name. They therefore lose information about Daylight Saving Time.\n\nIn addition to the required “wall clock” reading, a Time may contain an optional\nreading of the current process's monotonic clock, to provide additional precision\nfor comparison or subtraction.\nSee the “Monotonic Clocks” section in the package documentation for details.\n\nNote that the Go == operator compares not just the time instant but also the\nLocation and the monotonic clock reading. Therefore, Time values should not\nbe used as map or database keys without first guaranteeing that the\nidentical Location has been set for all values, which can be achieved\nthrough use of the UTC or Local method, and that the monotonic clock reading\nhas been stripped by setting t = t.Round(0). In general, prefer t.Equal(u)\nto t == u, since t.Equal uses the most accurate comparison available and\ncorrectly handles the case when only one of its arguments has a monotonic\nclock reading."
          format: date-time
          title: A Time represents an instant in time with nanosecond precision.
          type: string
          x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
        finalizers:
          description: "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge"
          items:
            type: string
          type: array
          x-go-name: Finalizers
        generateName:
          description: "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will\nNOT return a 409 - instead, it will either return 201 Created or 500 with Reason\nServerTimeout indicating a unique name could not be found in the time allotted, and the client\nshould retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional"
          type: string
          x-go-name: GenerateName
        generation:
          description: |-
            A sequence number representing a specific generation of the desired state.
            Populated by the system. Read-only.
            +optional
          format: int64
          type: integer
          x-go-name: Generation
        labels:
          additionalProperties:
            type: string
          description: "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels\n+optional"
          type: object
          x-go-name: Labels
        managedFields:
          description: "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional"
          items:
            $ref: '#/components/schemas/ManagedFieldsEntry'
          type: array
          x-go-name: ManagedFields
        name:
          description: "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional"
          type: string
          x-go-name: Name
        namespace:
          description: "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/namespaces\n+optional"
          type: string
          x-go-name: Namespace
        ownerReferences:
          description: "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge"
          items:
            $ref: '#/components/schemas/OwnerReference'
          type: array
          x-go-name: OwnerReferences
        resourceVersion:
          description: "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
          type: string
          x-go-name: ResourceVersion
        selfLink:
          description: |-
            SelfLink is a URL representing this object.
            Populated by the system.
            Read-only.

            DEPRECATED
            Kubernetes will stop propagating this field in 1.20 release and the field is planned
            to be removed in 1.21 release.
            +optional
          type: string
          x-go-name: SelfLink
        uid:
          description: "UID is a type that holds unique ID values, including UUIDs.  Because we\ndon't ONLY use UUIDs, this is an alias to string.  Being a type captures\nintent and helps make sure that UIDs and names do not get conflated."
          type: string
          x-go-package: k8s.io/apimachinery/pkg/types
      type: object
      x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
    OwnerReference:
      description: "OwnerReference contains enough information to let you identify an owning\nobject. An owning object must be in the same namespace as the dependent, or\nbe cluster-scoped, so there is no namespace field.\n+structType=atomic"
      example:
        uid: uid
        controller: true
        apiVersion: apiVersion
        kind: kind
        name: name
        blockOwnerDeletion: true
      properties:
        apiVersion:
          description: API version of the referent.
          type: string
          x-go-name: APIVersion
        blockOwnerDeletion:
          description: "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional"
          type: boolean
          x-go-name: BlockOwnerDeletion
        controller:
          description: "If true, this reference points to the managing controller.\n+optional"
          type: boolean
          x-go-name: Controller
        kind:
          description: "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
          type: string
          x-go-name: Kind
        name:
          description: "Name of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names"
          type: string
          x-go-name: Name
        uid:
          description: "UID is a type that holds unique ID values, including UUIDs.  Because we\ndon't ONLY use UUIDs, this is an alias to string.  Being a type captures\nintent and helps make sure that UIDs and names do not get conflated."
          type: string
          x-go-package: k8s.io/apimachinery/pkg/types
      type: object
      x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
    PatchStackSourceConfigRequest:
      properties:
        source_config:
          $ref: '#/components/schemas/UpdateStackSourceConfigRequest'
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    PorterRelease:
      properties:
        build_config:
          $ref: '#/components/schemas/BuildConfig'
        git_action_config:
          $ref: '#/components/schemas/GitActionConfig'
        id:
          format: uint64
          type: integer
          x-go-name: ID
        image_repo_uri:
          type: string
          x-go-name: ImageRepoURI
        latest_version:
          type: string
          x-go-name: LatestVersion
        tags:
          items:
            type: string
          type: array
          x-go-name: Tags
        webhook_token:
          type: string
          x-go-name: WebhookToken
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    PutStackSourceConfigRequest:
      properties:
        source_configs:
          items:
            $ref: '#/components/schemas/CreateStackSourceConfigRequest'
          type: array
          x-go-name: SourceConfigs
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    Registry:
      example:
        do_integration_id: 5
        infra_id: 7
        azure_integration_id: 6
        gcp_integration_id: 5
        basic_integration_id: 1
        project_id: 9
        service: service
        name: name
        id: 2
        aws_integration_id: 0
        url: url
      properties:
        aws_integration_id:
          description: The AWS integration that was used to create or connect the registry
          format: uint64
          type: integer
          x-go-name: AWSIntegrationID
        azure_integration_id:
          description: The Azure integration that was used to create or connect the registry
          format: uint64
          type: integer
          x-go-name: AzureIntegrationID
        basic_integration_id:
          description: 'The basic integration that was used to connect the registry:'
          format: uint64
          type: integer
          x-go-name: BasicIntegrationID
        do_integration_id:
          description: |-
            The DO integration that was used to create or connect the registry:
            this points to an OAuthIntegrationID
          format: uint64
          type: integer
          x-go-name: DOIntegrationID
        gcp_integration_id:
          description: The GCP integration that was used to create or connect the registry
          format: uint64
          type: integer
          x-go-name: GCPIntegrationID
        id:
          format: uint64
          type: integer
          x-go-name: ID
        infra_id:
          description: "The infra id, if registry was provisioned with Porter"
          format: uint64
          type: integer
          x-go-name: InfraID
        name:
          description: Name of the registry
          type: string
          x-go-name: Name
        project_id:
          description: The project that this integration belongs to
          format: uint64
          type: integer
          x-go-name: ProjectID
        service:
          type: string
          x-go-package: github.com/porter-dev/porter/api/types
        url:
          description: URL of the registry
          type: string
          x-go-name: URL
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    RegistryRepository:
      description: Repository is a collection of images
      example:
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        uri: uri
      properties:
        created_at:
          description: When the repository was created
          format: date-time
          type: string
          x-go-name: CreatedAt
        name:
          description: Name of the repository
          type: string
          x-go-name: Name
        uri:
          description: The URI of the repository
          type: string
          x-go-name: URI
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    RegistryService:
      type: string
      x-go-package: github.com/porter-dev/porter/api/types
    Release:
      description: "Release describes a deployment of a chart, together with the chart\nand the variables used to deploy that chart."
      example:
        manifest: manifest
        name: name
        namespace: namespace
        chart:
          schema:
            - 6
            - 6
          metadata:
            maintainers:
              - name: name
                email: email
                url: url
              - name: name
                email: email
                url: url
            appVersion: appVersion
            keywords:
              - keywords
              - keywords
            sources:
              - sources
              - sources
            deprecated: true
            icon: icon
            annotations:
              key: annotations
            description: description
            type: type
            version: version
            dependencies:
              - condition: condition
                name: name
                alias: alias
                repository: repository
                import-values:
                  - "{}"
                  - "{}"
                version: version
                enabled: true
                tags:
                  - tags
                  - tags
              - condition: condition
                name: name
                alias: alias
                repository: repository
                import-values:
                  - "{}"
                  - "{}"
                version: version
                enabled: true
                tags:
                  - tags
                  - tags
            home: home
            tags: tags
            condition: condition
            apiVersion: apiVersion
            kubeVersion: kubeVersion
            name: name
          templates:
            - data:
                - 0
                - 0
              name: name
            - data:
                - 0
                - 0
              name: name
          values:
            key: "{}"
          files:
            - data:
                - 0
                - 0
              name: name
            - data:
                - 0
                - 0
              name: name
          lock:
            generated: 2000-01-23T04:56:07.000+00:00
            digest: digest
            dependencies:
              - condition: condition
                name: name
                alias: alias
                repository: repository
                import-values:
                  - "{}"
                  - "{}"
                version: version
                enabled: true
                tags:
                  - tags
                  - tags
              - condition: condition
                name: name
                alias: alias
                repository: repository
                import-values:
                  - "{}"
                  - "{}"
                version: version
                enabled: true
                tags:
                  - tags
                  - tags
        config:
          key: "{}"
        hooks:
          - path: path
            kind: kind
            manifest: manifest
            name: name
            weight: 1
            last_run:
              phase: phase
              completed_at: 2000-01-23T04:56:07.000+00:00
              started_at: 2000-01-23T04:56:07.000+00:00
            events:
              - null
              - null
            delete_policies:
              - null
              - null
          - path: path
            kind: kind
            manifest: manifest
            name: name
            weight: 1
            last_run:
              phase: phase
              completed_at: 2000-01-23T04:56:07.000+00:00
              started_at: 2000-01-23T04:56:07.000+00:00
            events:
              - null
              - null
            delete_policies:
              - null
              - null
        version: 5
        info:
          last_deployed: 2000-01-23T04:56:07.000+00:00
          deleted: 2000-01-23T04:56:07.000+00:00
          notes: notes
          first_deployed: 2000-01-23T04:56:07.000+00:00
          description: description
          status: status
      properties:
        chart:
          $ref: '#/components/schemas/Chart'
        config:
          additionalProperties:
            properties: {}
            type: object
          description: |-
            Config is the set of extra Values added to the chart.
            These values override the default values inside of the chart.
          type: object
          x-go-name: Config
        hooks:
          description: Hooks are all of the hooks declared for this release.
          items:
            $ref: '#/components/schemas/Hook'
          type: array
          x-go-name: Hooks
        info:
          $ref: '#/components/schemas/Info'
        manifest:
          description: Manifest is the string representation of the rendered template.
          type: string
          x-go-name: Manifest
        name:
          description: Name is the name of the release
          type: string
          x-go-name: Name
        namespace:
          description: Namespace is the kubernetes namespace of the release.
          type: string
          x-go-name: Namespace
        version:
          description: Version is an int which represents the revision of the release.
          format: int64
          type: integer
          x-go-name: Version
      type: object
      x-go-package: helm.sh/helm/v3/pkg/release
    Stack:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        revisions:
          - stack_id: stack_id
            created_at: 2000-01-23T04:56:07.000+00:00
            id: 5
            status: status
          - stack_id: stack_id
            created_at: 2000-01-23T04:56:07.000+00:00
            id: 5
            status: status
        id: id
        latest_revision:
          stack_id: stack_id
          created_at: 2000-01-23T04:56:07.000+00:00
          resources:
            - stack_app_data:
                template_name: template_name
                template_version: template_version
                template_repo_url: template_repo_url
              updated_at: 2000-01-23T04:56:07.000+00:00
              stack_id: stack_id
              name: name
              stack_revision_id: 6
              stack_source_config:
                image_repo_uri: image_repo_uri
                updated_at: 2000-01-23T04:56:07.000+00:00
                build:
                  git:
                    git_integration_kind: git_integration_kind
                    git_repo: git_repo
                    git_branch: git_branch
                    git_integration_id: 1
                  method: method
                  dockerfile:
                    dockerfile_path: dockerfile_path
                  buildpack:
                    buildpacks:
                      - buildpacks
                      - buildpacks
                    builder: builder
                  folder_path: folder_path
                stack_id: stack_id
                name: name
                stack_revision_id: 5
                created_at: 2000-01-23T04:56:07.000+00:00
                id: id
                image_tag: image_tag
              created_at: 2000-01-23T04:56:07.000+00:00
              id: id
            - stack_app_data:
                template_name: template_name
                template_version: template_version
                template_repo_url: template_repo_url
              updated_at: 2000-01-23T04:56:07.000+00:00
              stack_id: stack_id
              name: name
              stack_revision_id: 6
              stack_source_config:
                image_repo_uri: image_repo_uri
                updated_at: 2000-01-23T04:56:07.000+00:00
                build:
                  git:
                    git_integration_kind: git_integration_kind
                    git_repo: git_repo
                    git_branch: git_branch
                    git_integration_id: 1
                  method: method
                  dockerfile:
                    dockerfile_path: dockerfile_path
                  buildpack:
                    buildpacks:
                      - buildpacks
                      - buildpacks
                    builder: builder
                  folder_path: folder_path
                stack_id: stack_id
                name: name
                stack_revision_id: 5
                created_at: 2000-01-23T04:56:07.000+00:00
                id: id
                image_tag: image_tag
              created_at: 2000-01-23T04:56:07.000+00:00
              id: id
          id: 0
          source_configs:
            - image_repo_uri: image_repo_uri
              updated_at: 2000-01-23T04:56:07.000+00:00
              build:
                git:
                  git_integration_kind: git_integration_kind
                  git_repo: git_repo
                  git_branch: git_branch
                  git_integration_id: 1
                method: method
                dockerfile:
                  dockerfile_path: dockerfile_path
                buildpack:
                  buildpacks:
                    - buildpacks
                    - buildpacks
                  builder: builder
                folder_path: folder_path
              stack_id: stack_id
              name: name
              stack_revision_id: 5
              created_at: 2000-01-23T04:56:07.000+00:00
              id: id
              image_tag: image_tag
            - image_repo_uri: image_repo_uri
              updated_at: 2000-01-23T04:56:07.000+00:00
              build:
                git:
                  git_integration_kind: git_integration_kind
                  git_repo: git_repo
                  git_branch: git_branch
                  git_integration_id: 1
                method: method
                dockerfile:
                  dockerfile_path: dockerfile_path
                buildpack:
                  buildpacks:
                    - buildpacks
                    - buildpacks
                  builder: builder
                folder_path: folder_path
              stack_id: stack_id
              name: name
              stack_revision_id: 5
              created_at: 2000-01-23T04:56:07.000+00:00
              id: id
              image_tag: image_tag
          status: status
      properties:
        created_at:
          description: The time that the stack was initially created
          format: date-time
          type: string
          x-go-name: CreatedAt
        id:
          description: A unique id for the stack
          type: string
          x-go-name: ID
        latest_revision:
          $ref: '#/components/schemas/StackRevision'
        name:
          description: The display name of the stack
          type: string
          x-go-name: Name
        revisions:
          description: The list of revisions deployed for this stack
          items:
            $ref: '#/components/schemas/StackRevisionMeta'
          type: array
          x-go-name: Revisions
        updated_at:
          description: The time that the stack was last updated
          format: date-time
          type: string
          x-go-name: UpdatedAt
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    StackListResponse:
      items:
        $ref: '#/components/schemas/Stack'
      type: array
      x-go-package: github.com/porter-dev/porter/api/types
    StackResource:
      example:
        stack_app_data:
          template_name: template_name
          template_version: template_version
          template_repo_url: template_repo_url
        updated_at: 2000-01-23T04:56:07.000+00:00
        stack_id: stack_id
        name: name
        stack_revision_id: 6
        stack_source_config:
          image_repo_uri: image_repo_uri
          updated_at: 2000-01-23T04:56:07.000+00:00
          build:
            git:
              git_integration_kind: git_integration_kind
              git_repo: git_repo
              git_branch: git_branch
              git_integration_id: 1
            method: method
            dockerfile:
              dockerfile_path: dockerfile_path
            buildpack:
              buildpacks:
                - buildpacks
                - buildpacks
              builder: builder
            folder_path: folder_path
          stack_id: stack_id
          name: name
          stack_revision_id: 5
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          image_tag: image_tag
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
      properties:
        created_at:
          description: The time that this resource was initially created
          format: date-time
          type: string
          x-go-name: CreatedAt
        id:
          description: The id for this resource
          type: string
          x-go-name: ID
        name:
          description: The name of the resource
          type: string
          x-go-name: Name
        stack_app_data:
          $ref: '#/components/schemas/StackResourceAppData'
        stack_id:
          description: The stack ID that this resource belongs to
          type: string
          x-go-name: StackID
        stack_revision_id:
          description: The numerical revision id that this resource belongs to
          format: uint64
          type: integer
          x-go-name: StackRevisionID
        stack_source_config:
          $ref: '#/components/schemas/StackSourceConfig'
        updated_at:
          description: The time that this resource was last updated
          format: date-time
          type: string
          x-go-name: UpdatedAt
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    StackResourceAppData:
      example:
        template_name: template_name
        template_version: template_version
        template_repo_url: template_repo_url
      properties:
        template_name:
          description: "The name of the template in the Helm registry, such as `web`"
          type: string
          x-go-name: TemplateName
        template_repo_url:
          description: The URL of the Helm registry to pull the template from
          type: string
          x-go-name: TemplateRepoURL
        template_version:
          description: "The version of the template in the Helm registry, such as `v0.50.0`"
          type: string
          x-go-name: TemplateVersion
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    StackRevision:
      example:
        stack_id: stack_id
        created_at: 2000-01-23T04:56:07.000+00:00
        resources:
          - stack_app_data:
              template_name: template_name
              template_version: template_version
              template_repo_url: template_repo_url
            updated_at: 2000-01-23T04:56:07.000+00:00
            stack_id: stack_id
            name: name
            stack_revision_id: 6
            stack_source_config:
              image_repo_uri: image_repo_uri
              updated_at: 2000-01-23T04:56:07.000+00:00
              build:
                git:
                  git_integration_kind: git_integration_kind
                  git_repo: git_repo
                  git_branch: git_branch
                  git_integration_id: 1
                method: method
                dockerfile:
                  dockerfile_path: dockerfile_path
                buildpack:
                  buildpacks:
                    - buildpacks
                    - buildpacks
                  builder: builder
                folder_path: folder_path
              stack_id: stack_id
              name: name
              stack_revision_id: 5
              created_at: 2000-01-23T04:56:07.000+00:00
              id: id
              image_tag: image_tag
            created_at: 2000-01-23T04:56:07.000+00:00
            id: id
          - stack_app_data:
              template_name: template_name
              template_version: template_version
              template_repo_url: template_repo_url
            updated_at: 2000-01-23T04:56:07.000+00:00
            stack_id: stack_id
            name: name
            stack_revision_id: 6
            stack_source_config:
              image_repo_uri: image_repo_uri
              updated_at: 2000-01-23T04:56:07.000+00:00
              build:
                git:
                  git_integration_kind: git_integration_kind
                  git_repo: git_repo
                  git_branch: git_branch
                  git_integration_id: 1
                method: method
                dockerfile:
                  dockerfile_path: dockerfile_path
                buildpack:
                  buildpacks:
                    - buildpacks
                    - buildpacks
                  builder: builder
                folder_path: folder_path
              stack_id: stack_id
              name: name
              stack_revision_id: 5
              created_at: 2000-01-23T04:56:07.000+00:00
              id: id
              image_tag: image_tag
            created_at: 2000-01-23T04:56:07.000+00:00
            id: id
        id: 0
        source_configs:
          - image_repo_uri: image_repo_uri
            updated_at: 2000-01-23T04:56:07.000+00:00
            build:
              git:
                git_integration_kind: git_integration_kind
                git_repo: git_repo
                git_branch: git_branch
                git_integration_id: 1
              method: method
              dockerfile:
                dockerfile_path: dockerfile_path
              buildpack:
                buildpacks:
                  - buildpacks
                  - buildpacks
                builder: builder
              folder_path: folder_path
            stack_id: stack_id
            name: name
            stack_revision_id: 5
            created_at: 2000-01-23T04:56:07.000+00:00
            id: id
            image_tag: image_tag
          - image_repo_uri: image_repo_uri
            updated_at: 2000-01-23T04:56:07.000+00:00
            build:
              git:
                git_integration_kind: git_integration_kind
                git_repo: git_repo
                git_branch: git_branch
                git_integration_id: 1
              method: method
              dockerfile:
                dockerfile_path: dockerfile_path
              buildpack:
                buildpacks:
                  - buildpacks
                  - buildpacks
                builder: builder
              folder_path: folder_path
            stack_id: stack_id
            name: name
            stack_revision_id: 5
            created_at: 2000-01-23T04:56:07.000+00:00
            id: id
            image_tag: image_tag
        status: status
      properties:
        created_at:
          description: The time that this revision was created
          format: date-time
          type: string
          x-go-name: CreatedAt
        id:
          description: The id of the revision
          format: uint64
          type: integer
          x-go-name: ID
        resources:
          description: The list of resources deployed in this revision
          items:
            $ref: '#/components/schemas/StackResource'
          type: array
          x-go-name: Resources
        source_configs:
          items:
            $ref: '#/components/schemas/StackSourceConfig'
          type: array
          x-go-name: SourceConfigs
        stack_id:
          description: The stack ID that this source config belongs to
          type: string
          x-go-name: StackID
        status:
          type: string
          x-go-package: github.com/porter-dev/porter/api/types
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    StackRevisionMeta:
      example:
        stack_id: stack_id
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 5
        status: status
      properties:
        created_at:
          description: The time that this revision was created
          format: date-time
          type: string
          x-go-name: CreatedAt
        id:
          description: The id of the revision
          format: uint64
          type: integer
          x-go-name: ID
        stack_id:
          description: The stack ID that this source config belongs to
          type: string
          x-go-name: StackID
        status:
          type: string
          x-go-package: github.com/porter-dev/porter/api/types
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    StackRevisionStatus:
      type: string
      x-go-package: github.com/porter-dev/porter/api/types
    StackRollbackRequest:
      properties:
        target_revision:
          format: uint64
          type: integer
          x-go-name: TargetRevision
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    StackSourceConfig:
      example:
        image_repo_uri: image_repo_uri
        updated_at: 2000-01-23T04:56:07.000+00:00
        build:
          git:
            git_integration_kind: git_integration_kind
            git_repo: git_repo
            git_branch: git_branch
            git_integration_id: 1
          method: method
          dockerfile:
            dockerfile_path: dockerfile_path
          buildpack:
            buildpacks:
              - buildpacks
              - buildpacks
            builder: builder
          folder_path: folder_path
        stack_id: stack_id
        name: name
        stack_revision_id: 5
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        image_tag: image_tag
      properties:
        build:
          $ref: '#/components/schemas/StackSourceConfigBuild'
        created_at:
          description: The time that the source configuration was initially created
          format: date-time
          type: string
          x-go-name: CreatedAt
        id:
          description: The unique id of the stack source config
          type: string
          x-go-name: ID
        image_repo_uri:
          description: The complete image repo uri used by the source
          type: string
          x-go-name: ImageRepoURI
        image_tag:
          description: The current image tag used by the application
          type: string
          x-go-name: ImageTag
        name:
          description: The display name of the stack source
          type: string
          x-go-name: Name
        stack_id:
          description: The stack ID that this source config belongs to
          type: string
          x-go-name: StackID
        stack_revision_id:
          description: The numerical revision id that this source config belongs to
          format: uint64
          type: integer
          x-go-name: StackRevisionID
        updated_at:
          description: The time that the source configuration was last updated
          format: date-time
          type: string
          x-go-name: UpdatedAt
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    StackSourceConfigBuild:
      example:
        git:
          git_integration_kind: git_integration_kind
          git_repo: git_repo
          git_branch: git_branch
          git_integration_id: 1
        method: method
        dockerfile:
          dockerfile_path: dockerfile_path
        buildpack:
          buildpacks:
            - buildpacks
            - buildpacks
          builder: builder
        folder_path: folder_path
      properties:
        buildpack:
          $ref: '#/components/schemas/StackSourceConfigBuildPack'
        dockerfile:
          $ref: '#/components/schemas/StackSourceConfigBuildDockerfile'
        folder_path:
          description: "The path to the build context (the root folder of the application). For example, `.` or `./app`"
          type: string
          x-go-name: FolderPath
        git:
          $ref: '#/components/schemas/StackSourceConfigBuildGit'
        method:
          description: "The build method to use: can be `docker` (for dockerfiles), or `pack` (for buildpacks)"
          type: string
          x-go-name: Method
      required:
        - folder_path
        - method
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    StackSourceConfigBuildDockerfile:
      example:
        dockerfile_path: dockerfile_path
      properties:
        dockerfile_path:
          description: The path to the dockerfile from the root directory. Defaults to `./Dockerfile`.
          type: string
          x-go-name: DockerfilePath
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    StackSourceConfigBuildGit:
      example:
        git_integration_kind: git_integration_kind
        git_repo: git_repo
        git_branch: git_branch
        git_integration_id: 1
      properties:
        git_branch:
          description: The git branch to use
          type: string
          x-go-name: GitBranch
        git_integration_id:
          description: The integration id of the github or gitlab integration
          format: uint64
          type: integer
          x-go-name: GitIntegrationID
        git_integration_kind:
          description: "The git integration kind: can be `github` or `gitlab`"
          type: string
          x-go-name: GitIntegrationKind
        git_repo:
          description: "The git repo in ${owner}/${repo} form"
          type: string
          x-go-name: GitRepo
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    StackSourceConfigBuildPack:
      example:
        buildpacks:
          - buildpacks
          - buildpacks
        builder: builder
      properties:
        builder:
          description: The buildpack builder to use
          type: string
          x-go-name: Builder
        buildpacks:
          description: A list of buildpacks to use
          items:
            type: string
          type: array
          x-go-name: Buildpacks
      required:
        - builder
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    Status:
      description: Status is the status of a release
      type: string
      x-go-package: helm.sh/helm/v3/pkg/release
    Time:
      description: "Programs using times should typically store and pass them as values,\nnot pointers. That is, time variables and struct fields should be of\ntype time.Time, not *time.Time.\n\nA Time value can be used by multiple goroutines simultaneously except\nthat the methods GobDecode, UnmarshalBinary, UnmarshalJSON and\nUnmarshalText are not concurrency-safe.\n\nTime instants can be compared using the Before, After, and Equal methods.\nThe Sub method subtracts two instants, producing a Duration.\nThe Add method adds a Time and a Duration, producing a Time.\n\nThe zero value of type Time is January 1, year 1, 00:00:00.000000000 UTC.\nAs this time is unlikely to come up in practice, the IsZero method gives\na simple way of detecting a time that has not been initialized explicitly.\n\nEach Time has associated with it a Location, consulted when computing the\npresentation form of the time, such as in the Format, Hour, and Year methods.\nThe methods Local, UTC, and In return a Time with a specific location.\nChanging the location in this way changes only the presentation; it does not\nchange the instant in time being denoted and therefore does not affect the\ncomputations described in earlier paragraphs.\n\nRepresentations of a Time value saved by the GobEncode, MarshalBinary,\nMarshalJSON, and MarshalText methods store the Time.Location's offset, but not\nthe location name. They therefore lose information about Daylight Saving Time.\n\nIn addition to the required “wall clock” reading, a Time may contain an optional\nreading of the current process's monotonic clock, to provide additional precision\nfor comparison or subtraction.\nSee the “Monotonic Clocks” section in the package documentation for details.\n\nNote that the Go == operator compares not just the time instant but also the\nLocation and the monotonic clock reading. Therefore, Time values should not\nbe used as map or database keys without first guaranteeing that the\nidentical Location has been set for all values, which can be achieved\nthrough use of the UTC or Local method, and that the monotonic clock reading\nhas been stripped by setting t = t.Round(0). In general, prefer t.Equal(u)\nto t == u, since t.Equal uses the most accurate comparison available and\ncorrectly handles the case when only one of its arguments has a monotonic\nclock reading."
      format: date-time
      title: A Time represents an instant in time with nanosecond precision.
      type: string
      x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
    TypeMeta:
      description: +k8s:deepcopy-gen=false
      properties:
        apiVersion:
          description: "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional"
          type: string
          x-go-name: APIVersion
        kind:
          description: "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional"
          type: string
          x-go-name: Kind
      title: |-
        TypeMeta describes an individual object in an API response or request
        with strings representing the type of the object and its API schema version.
        Structures that are versioned or persisted should inline TypeMeta.
      type: object
      x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
    UID:
      description: "UID is a type that holds unique ID values, including UUIDs.  Because we\ndon't ONLY use UUIDs, this is an alias to string.  Being a type captures\nintent and helps make sure that UIDs and names do not get conflated."
      type: string
      x-go-package: k8s.io/apimachinery/pkg/types
    UpdateReleaseRequest:
      example:
        values: values
        version: version
      properties:
        values:
          type: string
          x-go-name: Values
        version:
          type: string
          x-go-name: ChartVersion
      type: object
      x-go-name: UpgradeReleaseRequest
      x-go-package: github.com/porter-dev/porter/api/types
    UpdateStackSourceConfigRequest:
      properties:
        image_repo_uri:
          type: string
          x-go-name: ImageRepoURI
        image_tag:
          type: string
          x-go-name: ImageTag
        name:
          type: string
          x-go-name: Name
      required:
        - image_repo_uri
        - image_tag
        - name
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    createNamespace_request:
      properties:
        name:
          type: string
          x-go-name: Name
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    createRelease_request:
      properties:
        build_config:
          $ref: '#/components/schemas/CreateBuildConfigRequest'
        github_action_config:
          $ref: '#/components/schemas/CreateGitActionConfigRequest'
        image_url:
          type: string
          x-go-name: ImageURL
        name:
          type: string
          x-go-name: Name
        synced_env_groups:
          items:
            type: string
          type: array
          x-go-name: SyncedEnvGroups
        tags:
          items:
            type: string
          type: array
          x-go-name: Tags
        template_name:
          type: string
          x-go-name: TemplateName
        template_version:
          type: string
          x-go-name: TemplateVersion
        values:
          additionalProperties:
            properties: {}
            type: object
          type: object
          x-go-name: Values
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    updateRelease_request:
      properties:
        values:
          type: string
          x-go-name: Values
        version:
          type: string
          x-go-name: ChartVersion
      type: object
      x-go-name: UpgradeReleaseRequest
      x-go-package: github.com/porter-dev/porter/api/types
    createStack_request:
      properties:
        app_resources:
          description: "A list of app resources to create. An app resource is an application helm chart, such as a `web` or `worker` template."
          items:
            $ref: '#/components/schemas/CreateStackAppResourceRequest'
          type: array
          x-go-name: AppResources
        name:
          description: The display name of the stack
          type: string
          x-go-name: Name
        source_configs:
          description: |-
            A list of configurations which can build an application. Each application resource must use at least one
            source config in order to build application from source. The source config can be specified as a Docker image
            registry or linked to a remote Git repository.
          items:
            $ref: '#/components/schemas/CreateStackSourceConfigRequest'
          type: array
          x-go-name: SourceConfigs
      required:
        - app_resources
        - name
        - source_configs
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    rollbackStack_request:
      properties:
        target_revision:
          format: uint64
          type: integer
          x-go-name: TargetRevision
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    putStackSource_request:
      properties:
        source_configs:
          items:
            $ref: '#/components/schemas/CreateStackSourceConfigRequest'
          type: array
          x-go-name: SourceConfigs
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    createRegistry_request:
      properties:
        acr_name:
          type: string
          x-go-name: ACRName
        acr_resource_group_name:
          description: Additional Azure-specific fields
          type: string
          x-go-name: ACRResourceGroupName
        aws_integration_id:
          format: uint64
          type: integer
          x-go-name: AWSIntegrationID
        azure_integration_id:
          format: uint64
          type: integer
          x-go-name: AzureIntegrationID
        basic_integration_id:
          format: uint64
          type: integer
          x-go-name: BasicIntegrationID
        do_integration_id:
          format: uint64
          type: integer
          x-go-name: DOIntegrationID
        gcp_integration_id:
          format: uint64
          type: integer
          x-go-name: GCPIntegrationID
        name:
          type: string
          x-go-name: Name
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    createRegistryRepository_request:
      properties:
        image_repo_uri:
          type: string
          x-go-name: ImageRepoURI
      type: object
      x-go-package: github.com/porter-dev/porter/api/types
    FormContent_settings:
      properties:
        default:
          properties: {}
          type: object
          x-go-name: Default
        disableAfterLaunch:
          type: boolean
          x-go-name: DisableAfterLaunch
        docs:
          type: string
          x-go-name: Docs
        omitUnitFromValue:
          type: boolean
          x-go-name: OmitUnitFromValue
        options:
          properties: {}
          type: object
          x-go-name: Options
        placeholder:
          type: string
          x-go-name: Placeholder
        unit:
          properties: {}
          type: object
          x-go-name: Unit
      type: object
      x-go-name: Settings
    FormTab_settings:
      properties:
        omitFromLaunch:
          type: boolean
          x-go-name: OmitFromLaunch
      type: object
      x-go-name: Settings
    GetNamespaceResponse_metadata:
      example:
        name: name
      properties:
        name:
          type: string
          x-go-name: Name
      type: object
      x-go-name: Metadata
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  links: {}
  callbacks: {}
x-original-swagger-version: "2.0"
info:
  description: "# Introduction\n\nWelcome to the documentation for Porter's API. Our public API is still a\nwork-in-progress, although all endpoints prefixed with `/api/v1` will remain\nstable. \n\n\nTo begin using the Porter API, API tokens must be enabled for your Porter\nproject. If API tokens are enabled, you will see the following in the\nproject settings page:\n\n<br />\n\n\nNearly all endpoints will have the following structure:\n\n\n\n```yaml\n/api/v1/projects/{project_id}/[resources]\n```\n\n\n\nFor example, creating a new release (which exists inside a cluster and\nnamespace) has the following endpoint:\n\n\n\n```yaml\nPOST /api/v1/projects/1/clusters/1/namespaces/default/releases\n```\n\nAll resources are by default pluralized (i.e. `releases` instead of\n`release`). The API supports the following HTTP Verbs:\n\n- `GET`\n- `POST`\n- `PUT`\n- `PATCH`\n- `DELETE`\n\nAPI design is based on the following actions:\n\n- List — lists a group of resources\n- Get — retrieves a single resource\n- Create — creates a new resource\n- Update — updates an existing resource\n- Delete — deletes an existing resource\n\n# Authorization\n\nRequests are authenticated via a JWT token that can be obtained from the dashboard in **Project Settings:**\n\n![image](https://imagedelivery.net/l4LYM_vOYKe7O1NCT_Nc_g/30748e55-35a9-478e-f5a9-fbe126099d00/large)\n\nJWT tokens are signed via an `HMAC-SHA` algorithm. All API tokens are **project-scoped**, other actions that are outside the scope of a project will need to be performed using a personal access token. \n\n<SecurityDefinitions />\n\n**Basic Roles**\n\nFor ease of use, each API token can be granted one of three roles: admin, developer, or viewer. A token with admin permissions can read or write to any resource in the project, a token with developer permissions can read or write to any resource *except* settings (only read for settings), and a token with viewer permissions can view all resources within the project *except* settings.\n\n**Custom Roles** \n\nAPI tokens can be assigned custom roles based on a set of custom **policies**. These policies can be created from the dashboard or the API. From the dashboard, when you create a custom policy, you can select the resources that you would like the role to access:\n\n![image](https://imagedelivery.net/l4LYM_vOYKe7O1NCT_Nc_g/84af3259-4ef2-4e9d-4319-563d61fb4300/large)\n\nEach policy refers to various **scopes** within a project. These scopes are the following:\n\n```yaml\nProject\n-- Cluster\n-- -- Namespace\n-- -- -- Application\n-- Infra\n-- Settings\n-- Registry\n-- Helm Repository\n-- Git Installation\n```\n\nFor each scope, a set of allowed **actions** can be granted.\n"
  version: 1.0.0
  title: API v1
  termsOfService: "https://docs.porter.run/terms-and-privacy/terms-of-service/"
  contact:
    name: Porter Support
    email: support@porter.run
tags:
  - name: Namespaces
    description: >
      Namespaces are a Kubernetes concept which divides resources in the cluster into  separate logical groups. Each Kubernetes cluster comes with a `default` namespace,  and typically a `kube-system` namespace which contains services which help Kubernetes run.

  - name: Releases
    description: Porter Releases
  - name: Registries
    description: Porter Registries
  - name: Stacks
    description: Porter Stacks
