openapi: 3.0.0
servers:
  - url: "https://dashboard.getporter.dev"
info:
  description: |
    # Introduction

    Welcome to the documentation for Porter's API. Our public API is still a
    work-in-progress, although all endpoints prefixed with `/api/v1` will remain
    stable. 


    To begin using the Porter API, API tokens must be enabled for your Porter
    project. If API tokens are enabled, you will see the following in the
    project settings page:


    ![image](https://imagedelivery.net/l4LYM_vOYKe7O1NCT_Nc_g/235c2839-3b43-49e4-a6c2-fc51c583a600/large)


    <br />


    Nearly all endpoints will have the following structure:



    ```yaml
    /api/v1/projects/{project_id}/[resources]
    ```



    For example, creating a new release (which exists inside a cluster and
    namespace) has the following endpoint:



    ```yaml
    POST /api/v1/projects/1/clusters/1/namespaces/default/releases
    ```

    All resources are by default pluralized (i.e. `releases` instead of
    `release`). The API supports the following HTTP Verbs:

    - `GET`
    - `POST`
    - `PUT`
    - `PATCH`
    - `DELETE`

    API design is based on the following actions:

    - List — lists a group of resources
    - Get — retrieves a single resource
    - Create — creates a new resource
    - Update — updates an existing resource
    - Delete — deletes an existing resource

    # Authorization

    Requests are authenticated via a JWT token that can be obtained from the dashboard in **Project Settings:**

    ![Untitled](API%20Reference%20fd48c9fca6f14ba2b066f959d4479b56/Untitled.png)

    JWT tokens are signed via an `HMAC-SHA` algorithm. All API tokens are **project-scoped**, other actions that are outside the scope of a project will need to be performed using a personal access token. 

    <SecurityDefinitions />

    **Basic Roles**

    For ease of use, each API token can be granted one of three roles: admin, developer, or viewer. A token with admin permissions can read or write to any resource in the project, a token with developer permissions can read or write to any resource *except* settings (only read for settings), and a token with viewer permissions can view all resources within the project *except* settings.

    **Custom Roles** 

    API tokens can be assigned custom roles based on a set of custom **policies**. These policies can be created from the dashboard or the API. From the dashboard, when you create a custom policy, you can select the resources that you would like the role to access:

    ![Untitled](API%20Reference%20fd48c9fca6f14ba2b066f959d4479b56/Untitled%201.png)


    Each policy refers to various **scopes** within a project. These scopes are the following:

    ```yaml
    Project
    -- Cluster
    -- -- Namespace
    -- -- -- Application
    -- Infra
    -- Settings
    -- Registry
    -- Helm Repository
    -- Git Installation
    ```

    For each scope, a set of allowed **actions** can be granted.
  version: 1.0.0
  title: API v1
  termsOfService: "https://docs.porter.run/terms-and-privacy/terms-of-service/"
  contact:
    name: Porter Support
    email: support@porter.run
tags:
  - name: Namespaces
    description: >
      Namespaces are a Kubernetes concept which divides resources in the cluster into 
      separate logical groups. Each Kubernetes cluster comes with a `default` namespace, 
      and typically a `kube-system` namespace which contains services which help Kubernetes run.
  - name: Releases
    description: Porter Releases
  - name: Registries
    description: Porter Registries
paths:
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces:
    post:
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The project ID
        - in: path
          name: cluster_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The cluster ID
      tags:
        - Namespaces
      summary: Create a new namespace
      operationId: createNamespace
      responses:
        "201":
          description: Successfully created a new namespace
        "403":
          description: Forbidden
      requestBody:
        $ref: "#/components/requestBodies/CreateNamespace"
    get:
      tags:
        - Namespaces
      summary: List all namespaces
      operationId: listNamespaces
      responses:
        "200":
          description: Successfully listed all namespaces
        "403":
          description: Forbidden
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}:
    get:
      tags:
        - Namespaces
      summary: Get a namespace
      operationId: getNamespace
      responses:
        "200":
          description: Successfully fetched the namespace
        "404":
          description: No such namespace exists
    delete:
      tags:
        - Namespaces
      summary: Delete a namespace
      operationId: deleteNamespace
      responses:
        "200":
          description: Successfully deleted the namespace if it existed
        "403":
          description: Forbidden
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases:
    post:
      tags:
        - Releases
      summary: Create a new release
      responses:
        "201":
          description: Successfully created the release
    get:
      tags:
        - Releases
      summary: List all releases
      responses:
        "200":
          description: Successfully listed all releases
        "403":
          description: Forbidden
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{release}/{version}:
    get:
      tags:
        - Releases
      summary: Get a release
      responses:
        "200":
          description: Successfully fetched the release
        "404":
          description: No such release exists
    patch:
      tags:
        - Releases
      summary: Update a release
      responses:
        "200":
          description: Successfully updated the release
        "404":
          description: No such release exists
    delete:
      tags:
        - Releases
      summary: Delete a release
      responses:
        "200":
          description: Successfully deleted the release if it existed
        "403":
          description: Forbidden
  /api/v1/projects/{project_id}/registries:
    post:
      tags:
        - Registries
      summary: Create a new registry
      responses:
        "201":
          description: Successfully created the new registry
    get:
      tags:
        - Registries
      summary: List all registries
      responses:
        "200":
          description: Successfully listed all registries
        "403":
          description: Forbidden
  /api/v1/projects/{project_id}/registries/{registry_id}:
    get:
      tags:
        - Registries
      summary: Get a registry
      responses:
        "200":
          description: Successfully fetched the registry
        "403":
          description: Forbidden
        "404":
          description: No such registry exists
    delete:
      tags:
        - Registries
      summary: Delete a registry
      responses:
        "200":
          description: Successfully deleted the registry if it existed
  /api/v1/projects/{project_id}/registries/{registry_id}/repositories:
    post:
      tags:
        - Registries
      summary: Create a repository inside a registry
      responses:
        "201":
          description: Successfully created the new repository
    get:
      tags:
        - Registries
      summary: List all repositories in a registry
      responses:
        "200":
          description: Successfully listed all repositories
        "403":
          description: Forbidden
  /api/v1/projects/{project_id}/registries/{registry_id}/repositories/{repository}:
    get:
      tags:
        - Registries
      summary: List all image tags of a repository
      responses:
        "200":
          description: Successfully listed all image tags
        "403":
          description: Forbidden
components:
  schemas:
    CreateNamespace:
      type: object
      properties:
        name:
          type: string
  requestBodies:
    CreateNamespace:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateNamespace"
      required: true
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  links: {}
  callbacks: {}
security:
  - Bearer: []