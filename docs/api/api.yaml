openapi: 3.0.0
servers:
  - url: "https://dashboard.getporter.dev"
info:
  description: |
    # Introduction

    This is the Porter API. 

    # Authentication

    Petstore offers two forms of authentication:
      - API Key
      - OAuth2
    OAuth2 - an open protocol to allow secure authorization in a simple
    and standard method from web, mobile and desktop applications.

    <SecurityDefinitions />
  version: 1.0.0
  title: API v1
  termsOfService: "https://docs.porter.run/terms-and-privacy/terms-of-service/"
  contact:
    name: Porter Support
    email: support@porter.run
tags:
  - name: Namespaces
    description: Porter Namespaces
  - name: Releases
    description: Porter Releases
  - name: Registries
    description: Porter Registries
paths:
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces:
    post:
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The project ID
        - in: path
          name: cluster_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The cluster ID
      tags:
        - Namespaces
      summary: Create a new namespace
      operationId: createNamespace
      responses:
        "201":
          description: Successfully created a new namespace
        "500":
          description: Internal server error
      requestBody:
        $ref: "#/components/requestBodies/CreateNamespace"
      security:
        - api_key: []
    get:
      tags:
        - Namespaces
      summary: List all namespaces
      operationId: listNamespaces
      responses:
        "200":
          description: Successfully listed all namespaces
        "500":
          description: Internal server error
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}:
    get:
      tags:
        - Namespaces
      summary: Get a namespace
      operationId: getNamespace
      responses:
        "200":
          description: Successfully fetched the namespace
        "404":
          description: No such namespace exists
        "500":
          description: Internal server error
    delete:
      tags:
        - Namespaces
      summary: Delete a namespace
      operationId: deleteNamespace
      responses:
        "200":
          description: Successfully deleted the namespace if it existed
        "500":
          description: Internal server error
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases:
    post:
      tags:
        - Releases
      summary: Create a new release
      responses:
        "201":
          description: Successfully created the release
        "500":
          description: Internal server error
    get:
      tags:
        - Releases
      summary: List all releases
      responses:
        "200":
          description: Successfully listed all releases
        "500":
          description: Internal server error
  /api/v1/projects/{project_id}/clusters/{cluster_id}/namespaces/{namespace}/releases/{release}/{version}:
    get:
      tags:
        - Releases
      summary: Get a release
      responses:
        "200":
          description: Successfully fetched the release
        "404":
          description: No such release exists
        "500":
          description: Internal server error
    patch:
      tags:
        - Releases
      summary: Update a release
      responses:
        "200":
          description: Successfully updated the release
        "404":
          description: No such release exists
        "500":
          description: Internal server error
    delete:
      tags:
        - Releases
      summary: Delete a release
      responses:
        "200":
          description: Successfully deleted the release if it existed
        "500":
          description: Internal server error
  /api/v1/projects/{project_id}/registries:
    post:
      tags:
        - Registries
      summary: Create a new registry
      responses:
        "201":
          description: Successfully created the new registry
        "500":
          description: Internal server error
    get:
      tags:
        - Registries
      summary: List all registries
      responses:
        "200":
          description: Successfully listed all registries
        "500":
          description: Internal server error
  /api/v1/projects/{project_id}/registries/{registry_id}:
    get:
      tags:
        - Registries
      summary: Get a registry
      responses:
        "200":
          description: Successfully fetched the registry
        "404":
          description: No such registry exists
        "500":
          description: Internal server error
    delete:
      tags:
        - Registries
      summary: Delete a registry
      responses:
        "200":
          description: Successfully deleted the registry if it existed
        "500":
          description: Internal server error
  /api/v1/projects/{project_id}/registries/{registry_id}/repositories:
    post:
      tags:
        - Registries
      summary: Create a repository inside a registry
      responses:
        "201":
          description: Successfully created the new repository
        "500":
          description: Internal server error
    get:
      tags:
        - Registries
      summary: List all repositories in a registry
      responses:
        "200":
          description: Successfully listed all repositories
        "500":
          description: Internal server error
  /api/v1/projects/{project_id}/registries/{registry_id}/repositories/{repository}:
    get:
      tags:
        - Registries
      summary: List all image tags of a repository
      responses:
        "200":
          description: Successfully listed all image tags
        "500":
          description: Internal server error
components:
  schemas:
    CreateNamespace:
      type: object
      properties:
        name:
          type: string
  requestBodies:
    CreateNamespace:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateNamespace"
      required: true
  securitySchemes:
    api_key:
      type: apiKey
      name: "Authorization: Bearer"
      in: header
  links: {}
  callbacks: {}
security: []
